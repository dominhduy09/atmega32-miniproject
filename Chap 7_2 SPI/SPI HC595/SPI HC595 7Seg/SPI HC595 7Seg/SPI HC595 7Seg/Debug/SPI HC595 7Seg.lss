
SPI HC595 7Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000f4  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  00000192  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000058  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001e2  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000162  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000233  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000040  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000156  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001076  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 56 00 	call	0xac	; 0xac <main>
  8a:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_Master_Init>:
uint8_t _7seg_decode[10] = {0xBF,0x06,0xDB,0xCF,0xE6,0xED,0xFD,0x07,0xFF,0xEF};

uint8_t count = 0;

void SPI_Master_Init(){
	DDRB |= (1<<SCK)|(1<<MOSI)|(1<<CE);					// set SCK, MOSI, CE as output
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 6b       	ori	r24, 0xB0	; 176
  96:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR);
  98:	8d b1       	in	r24, 0x0d	; 13
  9a:	80 65       	ori	r24, 0x50	; 80
  9c:	8d b9       	out	0x0d, r24	; 13
}
  9e:	08 95       	ret

000000a0 <SPI_Trans>:
 
void SPI_Trans(uint8_t data_send){
	PORTB &= ~(1<<CE);
  a0:	c4 98       	cbi	0x18, 4	; 24
	SPDR = data_send;
  a2:	8f b9       	out	0x0f, r24	; 15
	while(!((SPSR >> SPIF)&1));
  a4:	77 9b       	sbis	0x0e, 7	; 14
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <SPI_Trans+0x4>
	PORTB |= (1<<CE);
  a8:	c4 9a       	sbi	0x18, 4	; 24
}
  aa:	08 95       	ret

000000ac <main>:

int main(){
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
	SPI_Master_Init();
  b0:	0e 94 49 00 	call	0x92	; 0x92 <SPI_Master_Init>
	sei();
  b4:	78 94       	sei
		
	while(1){
		SPI_Trans(_7seg_decode[count]);
  b6:	c0 e6       	ldi	r28, 0x60	; 96
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	80 91 6a 00 	lds	r24, 0x006A
  be:	fe 01       	movw	r30, r28
  c0:	e8 0f       	add	r30, r24
  c2:	f1 1d       	adc	r31, r1
  c4:	80 81       	ld	r24, Z
  c6:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Trans>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	93 ec       	ldi	r25, 0xC3	; 195
  ce:	a9 e0       	ldi	r26, 0x09	; 9
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	a0 40       	sbci	r26, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x24>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x2e>
  da:	00 00       	nop
		_delay_ms(200);
		count++;
  dc:	80 91 6a 00 	lds	r24, 0x006A
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 6a 00 	sts	0x006A, r24
		if(count == 10) count = 0;
  e6:	8a 30       	cpi	r24, 0x0A	; 10
  e8:	41 f7       	brne	.-48     	; 0xba <main+0xe>
  ea:	10 92 6a 00 	sts	0x006A, r1
  ee:	e5 cf       	rjmp	.-54     	; 0xba <main+0xe>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
