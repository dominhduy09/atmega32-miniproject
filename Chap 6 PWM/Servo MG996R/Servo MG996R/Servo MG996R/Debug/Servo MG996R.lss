
Servo MG996R.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001e2  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000048  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a5  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000141  00000000  00000000  00000b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000261  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000197  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  000010c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  74:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Fast_PWM1_50Hz_Init>:
#include <avr/interrupt.h>

uint8_t i = 0;

void Fast_PWM1_50Hz_Init(){
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11);
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	8a 61       	ori	r24, 0x1A	; 26
  80:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1<<COM1A1) | (1<<WGM11);			//(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<WGM10);
  82:	8f b5       	in	r24, 0x2f	; 47
  84:	82 68       	ori	r24, 0x82	; 130
  86:	8f bd       	out	0x2f, r24	; 47
	OCR1A = 0;
  88:	1b bc       	out	0x2b, r1	; 43
  8a:	1a bc       	out	0x2a, r1	; 42
	ICR1 = 39999;
  8c:	8f e3       	ldi	r24, 0x3F	; 63
  8e:	9c e9       	ldi	r25, 0x9C	; 156
  90:	97 bd       	out	0x27, r25	; 39
  92:	86 bd       	out	0x26, r24	; 38
	TCNT1 = 0;
  94:	1d bc       	out	0x2d, r1	; 45
  96:	1c bc       	out	0x2c, r1	; 44
	TIMSK |= (1<<TOIE1);
  98:	89 b7       	in	r24, 0x39	; 57
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	89 bf       	out	0x39, r24	; 57
}
  9e:	08 95       	ret

000000a0 <main>:

int main(void){
	DDRD |= (1<<PD5);
  a0:	8d 9a       	sbi	0x11, 5	; 17
	PORTD &= ~(1<<PD5);
  a2:	95 98       	cbi	0x12, 5	; 18
	Fast_PWM1_50Hz_Init();
  a4:	0e 94 3e 00 	call	0x7c	; 0x7c <Fast_PWM1_50Hz_Init>
	sei();
  a8:	78 94       	sei
    while(1){
	   	i = (i+1)%3;
  aa:	23 e0       	ldi	r18, 0x03	; 3
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	80 91 60 00 	lds	r24, 0x0060
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	b9 01       	movw	r22, r18
  b8:	0e 94 8e 00 	call	0x11c	; 0x11c <__divmodhi4>
  bc:	80 93 60 00 	sts	0x0060, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	93 ed       	ldi	r25, 0xD3	; 211
  c4:	a0 e3       	ldi	r26, 0x30	; 48
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	a0 40       	sbci	r26, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x26>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x30>
  d0:	00 00       	nop
  d2:	ed cf       	rjmp	.-38     	; 0xae <main+0xe>

000000d4 <__vector_9>:
		_delay_ms(1000);
    }
	return 0;
}

ISR(TIMER1_OVF_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
	if(i == 0) OCR1A = 900;
  e2:	80 91 60 00 	lds	r24, 0x0060
  e6:	88 23       	and	r24, r24
  e8:	29 f4       	brne	.+10     	; 0xf4 <__vector_9+0x20>
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	9b bd       	out	0x2b, r25	; 43
  f0:	8a bd       	out	0x2a, r24	; 42
  f2:	0d c0       	rjmp	.+26     	; 0x10e <__vector_9+0x3a>
	else if(i == 1) OCR1A = 2700;
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	29 f4       	brne	.+10     	; 0x102 <__vector_9+0x2e>
  f8:	8c e8       	ldi	r24, 0x8C	; 140
  fa:	9a e0       	ldi	r25, 0x0A	; 10
  fc:	9b bd       	out	0x2b, r25	; 43
  fe:	8a bd       	out	0x2a, r24	; 42
 100:	06 c0       	rjmp	.+12     	; 0x10e <__vector_9+0x3a>
	else if(i == 2) OCR1A = 4600;
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	21 f4       	brne	.+8      	; 0x10e <__vector_9+0x3a>
 106:	88 ef       	ldi	r24, 0xF8	; 248
 108:	91 e1       	ldi	r25, 0x11	; 17
 10a:	9b bd       	out	0x2b, r25	; 43
 10c:	8a bd       	out	0x2a, r24	; 42
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__divmodhi4>:
 11c:	97 fb       	bst	r25, 7
 11e:	09 2e       	mov	r0, r25
 120:	07 26       	eor	r0, r23
 122:	0a d0       	rcall	.+20     	; 0x138 <__divmodhi4_neg1>
 124:	77 fd       	sbrc	r23, 7
 126:	04 d0       	rcall	.+8      	; 0x130 <__divmodhi4_neg2>
 128:	0c d0       	rcall	.+24     	; 0x142 <__udivmodhi4>
 12a:	06 d0       	rcall	.+12     	; 0x138 <__divmodhi4_neg1>
 12c:	00 20       	and	r0, r0
 12e:	1a f4       	brpl	.+6      	; 0x136 <__divmodhi4_exit>

00000130 <__divmodhi4_neg2>:
 130:	70 95       	com	r23
 132:	61 95       	neg	r22
 134:	7f 4f       	sbci	r23, 0xFF	; 255

00000136 <__divmodhi4_exit>:
 136:	08 95       	ret

00000138 <__divmodhi4_neg1>:
 138:	f6 f7       	brtc	.-4      	; 0x136 <__divmodhi4_exit>
 13a:	90 95       	com	r25
 13c:	81 95       	neg	r24
 13e:	9f 4f       	sbci	r25, 0xFF	; 255
 140:	08 95       	ret

00000142 <__udivmodhi4>:
 142:	aa 1b       	sub	r26, r26
 144:	bb 1b       	sub	r27, r27
 146:	51 e1       	ldi	r21, 0x11	; 17
 148:	07 c0       	rjmp	.+14     	; 0x158 <__udivmodhi4_ep>

0000014a <__udivmodhi4_loop>:
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	a6 17       	cp	r26, r22
 150:	b7 07       	cpc	r27, r23
 152:	10 f0       	brcs	.+4      	; 0x158 <__udivmodhi4_ep>
 154:	a6 1b       	sub	r26, r22
 156:	b7 0b       	sbc	r27, r23

00000158 <__udivmodhi4_ep>:
 158:	88 1f       	adc	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	5a 95       	dec	r21
 15e:	a9 f7       	brne	.-22     	; 0x14a <__udivmodhi4_loop>
 160:	80 95       	com	r24
 162:	90 95       	com	r25
 164:	bc 01       	movw	r22, r24
 166:	cd 01       	movw	r24, r26
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
