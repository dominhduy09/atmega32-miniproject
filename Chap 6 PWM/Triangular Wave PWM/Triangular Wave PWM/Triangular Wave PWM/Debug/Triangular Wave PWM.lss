
Triangular Wave PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000272  00800060  00000106  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008002d2  008002d2  0000040c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000050  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000108  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000cc  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000173  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000040  00000000  00000000  00000f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000eb  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000002b  00000000  00000000  0000104b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3d       	cpi	r26, 0xD2	; 210
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a2 ed       	ldi	r26, 0xD2	; 210
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3d       	cpi	r26, 0xD4	; 212
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8a:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Fast_PWM0_Init>:

uint16_t i = 0;


void Fast_PWM0_Init(){
	TCCR0 |= 0x69;			//(1<<WGM01) | (1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<CS00); //0x79
  92:	83 b7       	in	r24, 0x33	; 51
  94:	89 66       	ori	r24, 0x69	; 105
  96:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0x00;
  98:	1c be       	out	0x3c, r1	; 60
	TIMSK |= (1<<TOIE0);
  9a:	89 b7       	in	r24, 0x39	; 57
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	89 bf       	out	0x39, r24	; 57
}
  a0:	08 95       	ret

000000a2 <main>:

int main(void){
	DDRB |= (1<<PB3);
  a2:	bb 9a       	sbi	0x17, 3	; 23
	PORTB &= ~(1<<PB3);
  a4:	c3 98       	cbi	0x18, 3	; 24
	Fast_PWM0_Init();
  a6:	0e 94 49 00 	call	0x92	; 0x92 <Fast_PWM0_Init>
	sei();
  aa:	78 94       	sei
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0xa>

000000ae <__vector_11>:
    while(1){
	   	
    }
}

ISR(TIMER0_OVF_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	OCR0 = Ref_val[i];
  c2:	80 91 d2 02 	lds	r24, 0x02D2
  c6:	90 91 d3 02 	lds	r25, 0x02D3
  ca:	fc 01       	movw	r30, r24
  cc:	e0 5a       	subi	r30, 0xA0	; 160
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	20 81       	ld	r18, Z
  d2:	2c bf       	out	0x3c, r18	; 60
	i++;
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	90 93 d3 02 	sts	0x02D3, r25
  da:	80 93 d2 02 	sts	0x02D2, r24
	if(i == 625) i = 0;
  de:	22 e0       	ldi	r18, 0x02	; 2
  e0:	81 37       	cpi	r24, 0x71	; 113
  e2:	92 07       	cpc	r25, r18
  e4:	21 f4       	brne	.+8      	; 0xee <__vector_11+0x40>
  e6:	10 92 d3 02 	sts	0x02D3, r1
  ea:	10 92 d2 02 	sts	0x02D2, r1
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
