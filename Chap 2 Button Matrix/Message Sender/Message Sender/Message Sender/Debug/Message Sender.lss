
Message Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00000cec  00000d80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080010a  0080010a  00000e2a  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001e2  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000259  00000000  00000000  00001d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000013b0  00000000  00000000  00001fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000082c  00000000  00000000  0000335b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000015eb  00000000  00000000  00003b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00005174  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000454  00000000  00000000  00005304  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a16  00000000  00000000  00005758  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000015f  00000000  00000000  0000616e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  000062cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 30       	cpi	r26, 0x0A	; 10
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e0       	ldi	r26, 0x0A	; 10
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 31       	cpi	r26, 0x15	; 21
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 48 02 	call	0x490	; 0x490 <main>
  8a:	0c 94 74 06 	jmp	0xce8	; 0xce8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Check_key>:
uint8_t R_add[NOR] = {R0, R1, R2, R3};
uint8_t C_add[NOC] = {C0, C1, C2, C3};
	
uint8_t Check_key(){
	uint8_t __i,__j,__temp;
	_DDR(B_PORT) = (1<<(_PIN(B_PORT),C0)) | (1<<(_PIN(B_PORT),C1)) | (1<<(_PIN(B_PORT),C2)) | (1<<(_PIN(B_PORT),C3));
  92:	89 b3       	in	r24, 0x19	; 25
  94:	89 b3       	in	r24, 0x19	; 25
  96:	89 b3       	in	r24, 0x19	; 25
  98:	89 b3       	in	r24, 0x19	; 25
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	8a bb       	out	0x1a, r24	; 26
	_PORT(B_PORT) = (1<<(_PIN(B_PORT),C0)) | (1<<(_PIN(B_PORT),C1)) | (1<<(_PIN(B_PORT),C2)) | (1<<(_PIN(B_PORT),C3));
  9e:	99 b3       	in	r25, 0x19	; 25
  a0:	99 b3       	in	r25, 0x19	; 25
  a2:	99 b3       	in	r25, 0x19	; 25
  a4:	99 b3       	in	r25, 0x19	; 25
  a6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <Check_key+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <Check_key+0x1e>
	_delay_us(0.5);												//Wait for PINB is synchronized before read
	__temp = _PIN(B_PORT);
  b0:	49 b3       	in	r20, 0x19	; 25
	for(__i=0; __i<NOR; __i++) 
		if((__temp >> R_add[__i])&1) break;
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	ca 01       	movw	r24, r20
  b6:	00 90 60 00 	lds	r0, 0x0060
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <Check_key+0x2e>
  bc:	95 95       	asr	r25
  be:	87 95       	ror	r24
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <Check_key+0x2a>
  c4:	80 fd       	sbrc	r24, 0
  c6:	14 c0       	rjmp	.+40     	; 0xf0 <Check_key+0x5e>
  c8:	e1 e6       	ldi	r30, 0x61	; 97
  ca:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t __i,__j,__temp;
	_DDR(B_PORT) = (1<<(_PIN(B_PORT),C0)) | (1<<(_PIN(B_PORT),C1)) | (1<<(_PIN(B_PORT),C2)) | (1<<(_PIN(B_PORT),C3));
	_PORT(B_PORT) = (1<<(_PIN(B_PORT),C0)) | (1<<(_PIN(B_PORT),C1)) | (1<<(_PIN(B_PORT),C2)) | (1<<(_PIN(B_PORT),C3));
	_delay_us(0.5);												//Wait for PINB is synchronized before read
	__temp = _PIN(B_PORT);
	for(__i=0; __i<NOR; __i++) 
  cc:	91 e0       	ldi	r25, 0x01	; 1
		if((__temp >> R_add[__i])&1) break;
  ce:	9a 01       	movw	r18, r20
  d0:	01 90       	ld	r0, Z+
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <Check_key+0x46>
  d4:	35 95       	asr	r19
  d6:	27 95       	ror	r18
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <Check_key+0x42>
  dc:	20 fd       	sbrc	r18, 0
  de:	05 c0       	rjmp	.+10     	; 0xea <Check_key+0x58>
	uint8_t __i,__j,__temp;
	_DDR(B_PORT) = (1<<(_PIN(B_PORT),C0)) | (1<<(_PIN(B_PORT),C1)) | (1<<(_PIN(B_PORT),C2)) | (1<<(_PIN(B_PORT),C3));
	_PORT(B_PORT) = (1<<(_PIN(B_PORT),C0)) | (1<<(_PIN(B_PORT),C1)) | (1<<(_PIN(B_PORT),C2)) | (1<<(_PIN(B_PORT),C3));
	_delay_us(0.5);												//Wait for PINB is synchronized before read
	__temp = _PIN(B_PORT);
	for(__i=0; __i<NOR; __i++) 
  e0:	9f 5f       	subi	r25, 0xFF	; 255
  e2:	94 30       	cpi	r25, 0x04	; 4
  e4:	a1 f7       	brne	.-24     	; 0xce <Check_key+0x3c>
		if((__temp >> R_add[__i])&1) break;
	if(__i == NOR) return -1;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	08 95       	ret
  ea:	94 30       	cpi	r25, 0x04	; 4
  ec:	11 f4       	brne	.+4      	; 0xf2 <Check_key+0x60>
  ee:	31 c0       	rjmp	.+98     	; 0x152 <Check_key+0xc0>
	uint8_t __i,__j,__temp;
	_DDR(B_PORT) = (1<<(_PIN(B_PORT),C0)) | (1<<(_PIN(B_PORT),C1)) | (1<<(_PIN(B_PORT),C2)) | (1<<(_PIN(B_PORT),C3));
	_PORT(B_PORT) = (1<<(_PIN(B_PORT),C0)) | (1<<(_PIN(B_PORT),C1)) | (1<<(_PIN(B_PORT),C2)) | (1<<(_PIN(B_PORT),C3));
	_delay_us(0.5);												//Wait for PINB is synchronized before read
	__temp = _PIN(B_PORT);
	for(__i=0; __i<NOR; __i++) 
  f0:	90 e0       	ldi	r25, 0x00	; 0
		if((__temp >> R_add[__i])&1) break;
	if(__i == NOR) return -1;
	
	_DDR(B_PORT) = (1<<(_PIN(B_PORT),R0)) | (1<<(_PIN(B_PORT),R1)) | (1<<(_PIN(B_PORT),R2)) | (1<<(_PIN(B_PORT),R3));
  f2:	89 b3       	in	r24, 0x19	; 25
  f4:	89 b3       	in	r24, 0x19	; 25
  f6:	89 b3       	in	r24, 0x19	; 25
  f8:	89 b3       	in	r24, 0x19	; 25
  fa:	80 ef       	ldi	r24, 0xF0	; 240
  fc:	8a bb       	out	0x1a, r24	; 26
	_PORT(B_PORT) = (1<<(_PIN(B_PORT),R0)) | (1<<(_PIN(B_PORT),R1)) | (1<<(_PIN(B_PORT),R2)) | (1<<(_PIN(B_PORT),R3));
  fe:	29 b3       	in	r18, 0x19	; 25
 100:	29 b3       	in	r18, 0x19	; 25
 102:	29 b3       	in	r18, 0x19	; 25
 104:	29 b3       	in	r18, 0x19	; 25
 106:	8b bb       	out	0x1b, r24	; 27
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <Check_key+0x78>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <Check_key+0x7e>
	_delay_us(0.5);												//Wait for PINB is synchronized before read
	__temp = _PIN(B_PORT);
 110:	49 b3       	in	r20, 0x19	; 25
	for(__j=0; __j<NOC; __j++)
		if((__temp >> C_add[__j])&1) break;
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	9a 01       	movw	r18, r20
 116:	00 90 64 00 	lds	r0, 0x0064
 11a:	02 c0       	rjmp	.+4      	; 0x120 <Check_key+0x8e>
 11c:	35 95       	asr	r19
 11e:	27 95       	ror	r18
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <Check_key+0x8a>
 124:	20 fd       	sbrc	r18, 0
 126:	10 c0       	rjmp	.+32     	; 0x148 <Check_key+0xb6>
 128:	e5 e6       	ldi	r30, 0x65	; 101
 12a:	f0 e0       	ldi	r31, 0x00	; 0
	
	_DDR(B_PORT) = (1<<(_PIN(B_PORT),R0)) | (1<<(_PIN(B_PORT),R1)) | (1<<(_PIN(B_PORT),R2)) | (1<<(_PIN(B_PORT),R3));
	_PORT(B_PORT) = (1<<(_PIN(B_PORT),R0)) | (1<<(_PIN(B_PORT),R1)) | (1<<(_PIN(B_PORT),R2)) | (1<<(_PIN(B_PORT),R3));
	_delay_us(0.5);												//Wait for PINB is synchronized before read
	__temp = _PIN(B_PORT);
	for(__j=0; __j<NOC; __j++)
 12c:	81 e0       	ldi	r24, 0x01	; 1
		if((__temp >> C_add[__j])&1) break;
 12e:	9a 01       	movw	r18, r20
 130:	01 90       	ld	r0, Z+
 132:	02 c0       	rjmp	.+4      	; 0x138 <Check_key+0xa6>
 134:	35 95       	asr	r19
 136:	27 95       	ror	r18
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <Check_key+0xa2>
 13c:	20 fd       	sbrc	r18, 0
 13e:	05 c0       	rjmp	.+10     	; 0x14a <Check_key+0xb8>
	
	_DDR(B_PORT) = (1<<(_PIN(B_PORT),R0)) | (1<<(_PIN(B_PORT),R1)) | (1<<(_PIN(B_PORT),R2)) | (1<<(_PIN(B_PORT),R3));
	_PORT(B_PORT) = (1<<(_PIN(B_PORT),R0)) | (1<<(_PIN(B_PORT),R1)) | (1<<(_PIN(B_PORT),R2)) | (1<<(_PIN(B_PORT),R3));
	_delay_us(0.5);												//Wait for PINB is synchronized before read
	__temp = _PIN(B_PORT);
	for(__j=0; __j<NOC; __j++)
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	84 30       	cpi	r24, 0x04	; 4
 144:	a1 f7       	brne	.-24     	; 0x12e <Check_key+0x9c>
 146:	01 c0       	rjmp	.+2      	; 0x14a <Check_key+0xb8>
 148:	80 e0       	ldi	r24, 0x00	; 0
		if((__temp >> C_add[__j])&1) break;
	
	return 4*__i+__j;
 14a:	99 0f       	add	r25, r25
 14c:	99 0f       	add	r25, r25
 14e:	89 0f       	add	r24, r25
 150:	08 95       	ret
	_PORT(B_PORT) = (1<<(_PIN(B_PORT),C0)) | (1<<(_PIN(B_PORT),C1)) | (1<<(_PIN(B_PORT),C2)) | (1<<(_PIN(B_PORT),C3));
	_delay_us(0.5);												//Wait for PINB is synchronized before read
	__temp = _PIN(B_PORT);
	for(__i=0; __i<NOR; __i++) 
		if((__temp >> R_add[__i])&1) break;
	if(__i == NOR) return -1;
 152:	8f ef       	ldi	r24, 0xFF	; 255
	__temp = _PIN(B_PORT);
	for(__j=0; __j<NOC; __j++)
		if((__temp >> C_add[__j])&1) break;
	
	return 4*__i+__j;
 154:	08 95       	ret

00000156 <LCD_BusyLoop>:
	/*****************************************************************
		This function waits till LCD is BUSY
	*****************************************************************/	
	uint8_t busy,status=0x00,temp;

	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));			//Change Port to input type because we are reading data
 156:	81 b3       	in	r24, 0x11	; 17
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	81 bb       	out	0x11, r24	; 17

	//change LCD mode
	SET_RW();										//Read mode
 15c:	91 9a       	sbi	0x12, 1	; 18
	CLEAR_RS();										//Read status
 15e:	90 98       	cbi	0x12, 0	; 18
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_BusyLoop+0xc>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_BusyLoop+0x12>

	//Let the RW/RS lines stabilize
	_delay_us(0.5);									//tAS
	do{
		SET_E();
 168:	92 9a       	sbi	0x12, 2	; 18
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_BusyLoop+0x16>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_BusyLoop+0x1c>
		_delay_us(0.5);								//Wait tDA for data to become available
		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 172:	80 b3       	in	r24, 0x10	; 16
		status=status<<4;
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_BusyLoop+0x22>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_BusyLoop+0x28>
		_delay_us(0.5);

		CLEAR_E();									//Pull E low
 17e:	92 98       	cbi	0x12, 2	; 18
 180:	95 e0       	ldi	r25, 0x05	; 5
 182:	9a 95       	dec	r25
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_BusyLoop+0x2c>
 186:	00 00       	nop
		_delay_us(1);								//tEL
		SET_E();
 188:	92 9a       	sbi	0x12, 2	; 18
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	9a 95       	dec	r25
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_BusyLoop+0x36>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_BusyLoop+0x3c>
		_delay_us(0.5);

		temp = (LCD_DATA_PIN>>LCD_DATA_POS);
 192:	90 b3       	in	r25, 0x10	; 16
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	9a 95       	dec	r25
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_BusyLoop+0x40>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_BusyLoop+0x46>
		temp &= 0x0F;
		status |= temp;
		busy = status & 0b10000000;
		_delay_us(0.5);
		CLEAR_E();
 19c:	92 98       	cbi	0x12, 2	; 18
 19e:	95 e0       	ldi	r25, 0x05	; 5
 1a0:	9a 95       	dec	r25
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_BusyLoop+0x4a>
 1a4:	00 00       	nop
		_delay_us(1);								//tEL
	}while(busy);
 1a6:	88 23       	and	r24, r24
 1a8:	fc f2       	brlt	.-66     	; 0x168 <LCD_BusyLoop+0x12>
	CLEAR_RW();										//write mode
 1aa:	91 98       	cbi	0x12, 1	; 18
	
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);				//Change Port to output
 1ac:	81 b3       	in	r24, 0x11	; 17
 1ae:	80 6f       	ori	r24, 0xF0	; 240
 1b0:	81 bb       	out	0x11, r24	; 17
}
 1b2:	08 95       	ret

000001b4 <LCD_Byte>:
		NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND
	*****************************************************************/
	uint8_t hn,ln;									//Nibbles
	uint8_t temp;

	hn = c>>4;
 1b4:	28 2f       	mov	r18, r24
 1b6:	22 95       	swap	r18
 1b8:	2f 70       	andi	r18, 0x0F	; 15
	ln = (c & 0x0F);
 1ba:	8f 70       	andi	r24, 0x0F	; 15

	if(isdata == 0)
 1bc:	66 23       	and	r22, r22
 1be:	11 f4       	brne	.+4      	; 0x1c4 <LCD_Byte+0x10>
		CLEAR_RS();
 1c0:	90 98       	cbi	0x12, 0	; 18
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <LCD_Byte+0x12>
	else
		SET_RS();
 1c4:	90 9a       	sbi	0x12, 0	; 18
 1c6:	92 e0       	ldi	r25, 0x02	; 2
 1c8:	9a 95       	dec	r25
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCD_Byte+0x14>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <LCD_Byte+0x1a>

	_delay_us(0.500);								//tAS

	SET_E();										//Send high nibble
 1ce:	92 9a       	sbi	0x12, 2	; 18
	temp = (LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 1d0:	92 b3       	in	r25, 0x12	; 18
 1d2:	22 95       	swap	r18
 1d4:	20 7f       	andi	r18, 0xF0	; 240
 1d6:	9f 70       	andi	r25, 0x0F	; 15
 1d8:	92 2b       	or	r25, r18
	LCD_DATA_PORT = temp;
 1da:	92 bb       	out	0x12, r25	; 18
 1dc:	95 e0       	ldi	r25, 0x05	; 5
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_Byte+0x2a>
 1e2:	00 00       	nop
	_delay_us(1);									//tEH

	//Now data lines are stable pull E low for transmission

	CLEAR_E();										//Send the lower nibble
 1e4:	92 98       	cbi	0x12, 2	; 18
 1e6:	95 e0       	ldi	r25, 0x05	; 5
 1e8:	9a 95       	dec	r25
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCD_Byte+0x34>
 1ec:	00 00       	nop
	_delay_us(1);
	SET_E();
 1ee:	92 9a       	sbi	0x12, 2	; 18
	temp = (LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 1f0:	92 b3       	in	r25, 0x12	; 18
 1f2:	82 95       	swap	r24
 1f4:	80 7f       	andi	r24, 0xF0	; 240
 1f6:	9f 70       	andi	r25, 0x0F	; 15
 1f8:	89 2b       	or	r24, r25
	LCD_DATA_PORT = temp;
 1fa:	82 bb       	out	0x12, r24	; 18
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_Byte+0x4a>
 202:	00 00       	nop
	_delay_us(1);									//tEH	

	CLEAR_E();										//SEND
 204:	92 98       	cbi	0x12, 2	; 18
 206:	95 e0       	ldi	r25, 0x05	; 5
 208:	9a 95       	dec	r25
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_Byte+0x54>
 20c:	00 00       	nop

	_delay_us(1);									//tEL
	LCD_BusyLoop();
 20e:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_BusyLoop>
}
 212:	08 95       	ret

00000214 <LCD_Init>:
	CLEAR_RW();										//write mode
	
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);				//Change Port to output
}

void LCD_Init(uint8_t style){
 214:	1f 93       	push	r17
 216:	18 2f       	mov	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	96 e7       	ldi	r25, 0x76	; 118
 21c:	a1 e0       	ldi	r26, 0x01	; 1
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	a0 40       	sbci	r26, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <LCD_Init+0xa>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Init+0x14>
 228:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR |= (0x0F<<LCD_DATA_POS);
 22a:	81 b3       	in	r24, 0x11	; 17
 22c:	80 6f       	ori	r24, 0xF0	; 240
 22e:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR |= (1<<LCD_E_POS);
 230:	8a 9a       	sbi	0x11, 2	; 17
	LCD_RS_DDR |= (1<<LCD_RS_POS);
 232:	88 9a       	sbi	0x11, 0	; 17
	LCD_RW_DDR |= (1<<LCD_RW_POS);
 234:	89 9a       	sbi	0x11, 1	; 17

	LCD_DATA_PORT &= (~(0x0F<<LCD_DATA_POS));
 236:	82 b3       	in	r24, 0x12	; 18
 238:	8f 70       	andi	r24, 0x0F	; 15
 23a:	82 bb       	out	0x12, r24	; 18
	CLEAR_E();
 23c:	92 98       	cbi	0x12, 2	; 18
	CLEAR_RW();
 23e:	91 98       	cbi	0x12, 1	; 18
	CLEAR_RS();
 240:	90 98       	cbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_Init+0x30>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Init+0x32>
 246:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);									//tAS

	SET_E();
 248:	92 9a       	sbi	0x12, 2	; 18
	LCD_DATA_PORT |= ((0b00000010)<<LCD_DATA_POS);	//[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 24a:	95 9a       	sbi	0x12, 5	; 18
 24c:	95 e0       	ldi	r25, 0x05	; 5
 24e:	9a 95       	dec	r25
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_Init+0x3a>
 252:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 254:	92 98       	cbi	0x12, 2	; 18
 256:	a5 e0       	ldi	r26, 0x05	; 5
 258:	aa 95       	dec	r26
 25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_Init+0x44>
 25c:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Function set Command
	LCD_BusyLoop();									//[B] Forgot this delay
 25e:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_BusyLoop>
	//Now the LCD is in 4-bit mode

	LCD_Cmd(0b00101000);								//function set 4-bit,2 line 5x7 dot format
 262:	88 e2       	ldi	r24, 0x28	; 40
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Byte>
	LCD_Cmd(0b00001100|style);						//Display On
 26a:	81 2f       	mov	r24, r17
 26c:	8c 60       	ori	r24, 0x0C	; 12
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Byte>
	
}
 274:	1f 91       	pop	r17
 276:	08 95       	ret

00000278 <LCD_WriteString>:

void LCD_WriteString(const char *msg){
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
	This function Writes a given string to lcd at the current cursor
	location.
	Arguments:
	msg: a null terminated string to print
	*****************************************************************/
	while(*msg != '\0'){
 27e:	88 81       	ld	r24, Y
 280:	88 23       	and	r24, r24
 282:	39 f0       	breq	.+14     	; 0x292 <LCD_WriteString+0x1a>
	LCD_Cmd(0b00101000);								//function set 4-bit,2 line 5x7 dot format
	LCD_Cmd(0b00001100|style);						//Display On
	
}

void LCD_WriteString(const char *msg){
 284:	21 96       	adiw	r28, 0x01	; 1
	location.
	Arguments:
	msg: a null terminated string to print
	*****************************************************************/
	while(*msg != '\0'){
		LCD_Data(*msg);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Byte>
	This function Writes a given string to lcd at the current cursor
	location.
	Arguments:
	msg: a null terminated string to print
	*****************************************************************/
	while(*msg != '\0'){
 28c:	89 91       	ld	r24, Y+
 28e:	88 23       	and	r24, r24
 290:	d1 f7       	brne	.-12     	; 0x286 <LCD_WriteString+0xe>
		LCD_Data(*msg);
		msg++;
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <LCD_WriteInt>:

void LCD_WriteInt(int val,unsigned int field_length){
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <LCD_WriteInt+0xe>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <LCD_WriteInt+0x10>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	7b 01       	movw	r14, r22
	Arguments:
	1)int val	: Value to print
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val
	****************************************************************/
	char str[5] = {0,0,0,0,0};
 2b0:	fe 01       	movw	r30, r28
 2b2:	31 96       	adiw	r30, 0x01	; 1
 2b4:	25 e0       	ldi	r18, 0x05	; 5
 2b6:	df 01       	movw	r26, r30
 2b8:	1d 92       	st	X+, r1
 2ba:	2a 95       	dec	r18
 2bc:	e9 f7       	brne	.-6      	; 0x2b8 <LCD_WriteInt+0x20>
	int i = 4, j = 0;
	while(val){
 2be:	00 97       	sbiw	r24, 0x00	; 0
 2c0:	61 f0       	breq	.+24     	; 0x2da <LCD_WriteInt+0x42>
 2c2:	fe 01       	movw	r30, r28
 2c4:	36 96       	adiw	r30, 0x06	; 6
		str[i] = val%10;
 2c6:	2a e0       	ldi	r18, 0x0A	; 10
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	b9 01       	movw	r22, r18
 2cc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__divmodhi4>
 2d0:	82 93       	st	-Z, r24
		val = val/10;
 2d2:	86 2f       	mov	r24, r22
 2d4:	97 2f       	mov	r25, r23
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val
	****************************************************************/
	char str[5] = {0,0,0,0,0};
	int i = 4, j = 0;
	while(val){
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	c1 f7       	brne	.-16     	; 0x2ca <LCD_WriteInt+0x32>
		str[i] = val%10;
		val = val/10;
		i--;
	}
	if(field_length == -1)
 2da:	bf ef       	ldi	r27, 0xFF	; 255
 2dc:	eb 16       	cp	r14, r27
 2de:	bf ef       	ldi	r27, 0xFF	; 255
 2e0:	fb 06       	cpc	r15, r27
 2e2:	69 f4       	brne	.+26     	; 0x2fe <LCD_WriteInt+0x66>
		while(str[j] == 0) j++;
 2e4:	29 81       	ldd	r18, Y+1	; 0x01
 2e6:	22 23       	and	r18, r18
 2e8:	79 f4       	brne	.+30     	; 0x308 <LCD_WriteInt+0x70>
 2ea:	fe 01       	movw	r30, r28
 2ec:	32 96       	adiw	r30, 0x02	; 2
 2ee:	00 e0       	ldi	r16, 0x00	; 0
 2f0:	10 e0       	ldi	r17, 0x00	; 0
 2f2:	0f 5f       	subi	r16, 0xFF	; 255
 2f4:	1f 4f       	sbci	r17, 0xFF	; 255
 2f6:	21 91       	ld	r18, Z+
 2f8:	22 23       	and	r18, r18
 2fa:	d9 f3       	breq	.-10     	; 0x2f2 <LCD_WriteInt+0x5a>
 2fc:	07 c0       	rjmp	.+14     	; 0x30c <LCD_WriteInt+0x74>
	else
		j = 5 - field_length;
 2fe:	05 e0       	ldi	r16, 0x05	; 5
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	0e 19       	sub	r16, r14
 304:	1f 09       	sbc	r17, r15
 306:	02 c0       	rjmp	.+4      	; 0x30c <LCD_WriteInt+0x74>
		str[i] = val%10;
		val = val/10;
		i--;
	}
	if(field_length == -1)
		while(str[j] == 0) j++;
 308:	00 e0       	ldi	r16, 0x00	; 0
 30a:	10 e0       	ldi	r17, 0x00	; 0
	else
		j = 5 - field_length;

	if(val<0) LCD_Data('-');
 30c:	99 23       	and	r25, r25
 30e:	24 f4       	brge	.+8      	; 0x318 <LCD_WriteInt+0x80>
 310:	8d e2       	ldi	r24, 0x2D	; 45
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Byte>
	for(i = j; i < 5; i++) LCD_Data(48 + str[i]);
 318:	05 30       	cpi	r16, 0x05	; 5
 31a:	11 05       	cpc	r17, r1
 31c:	94 f4       	brge	.+36     	; 0x342 <LCD_WriteInt+0xaa>
		LCD_Data(*msg);
		msg++;
	}
}

void LCD_WriteInt(int val,unsigned int field_length){
 31e:	7e 01       	movw	r14, r28
 320:	08 94       	sec
 322:	e1 1c       	adc	r14, r1
 324:	f1 1c       	adc	r15, r1
 326:	e0 0e       	add	r14, r16
 328:	f1 1e       	adc	r15, r17
		while(str[j] == 0) j++;
	else
		j = 5 - field_length;

	if(val<0) LCD_Data('-');
	for(i = j; i < 5; i++) LCD_Data(48 + str[i]);
 32a:	f7 01       	movw	r30, r14
 32c:	81 91       	ld	r24, Z+
 32e:	7f 01       	movw	r14, r30
 330:	80 5d       	subi	r24, 0xD0	; 208
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Byte>
 338:	0f 5f       	subi	r16, 0xFF	; 255
 33a:	1f 4f       	sbci	r17, 0xFF	; 255
 33c:	05 30       	cpi	r16, 0x05	; 5
 33e:	11 05       	cpc	r17, r1
 340:	a4 f3       	brlt	.-24     	; 0x32a <LCD_WriteInt+0x92>
}
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	cf 91       	pop	r28
 34e:	df 91       	pop	r29
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	08 95       	ret

0000035a <LCD_GotoXY>:

void LCD_GotoXY(uint8_t x,uint8_t y){
	if(x>=20) return;
 35a:	84 31       	cpi	r24, 0x14	; 20
 35c:	78 f4       	brcc	.+30     	; 0x37c <LCD_GotoXY+0x22>

	#if (LCD_TYPE == LCD204 || LCD_TYPE == LCD162 || LCD_TYPE == LCD202)
	switch(y){
 35e:	62 30       	cpi	r22, 0x02	; 2
 360:	31 f0       	breq	.+12     	; 0x36e <LCD_GotoXY+0x14>
 362:	63 30       	cpi	r22, 0x03	; 3
 364:	31 f0       	breq	.+12     	; 0x372 <LCD_GotoXY+0x18>
 366:	61 30       	cpi	r22, 0x01	; 1
 368:	29 f4       	brne	.+10     	; 0x374 <LCD_GotoXY+0x1a>
		case 0:
			break;
		case 1:
			x|=0b01000000;
 36a:	80 64       	ori	r24, 0x40	; 64
			break;
 36c:	03 c0       	rjmp	.+6      	; 0x374 <LCD_GotoXY+0x1a>
		case 2:
			x+=0x14;
 36e:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 370:	01 c0       	rjmp	.+2      	; 0x374 <LCD_GotoXY+0x1a>
		case 3:
			x+=0x54;
 372:	8c 5a       	subi	r24, 0xAC	; 172
			break;
	}
	#endif

	x|=0b10000000;
  	LCD_Cmd(x);
 374:	80 68       	ori	r24, 0x80	; 128
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Byte>
 37c:	08 95       	ret

0000037e <Timer0_CTC_Init>:
uint8_t capt = 0, print = 0;
uint8_t temp, l_temp;
uint8_t  ms = 0, mms = 0;

void Timer0_CTC_Init(){ 
	TCCR0 |= (1<<WGM01) | (1<<CS01) | (1<<CS00);			//CTC mode with pre-scalar of 64
 37e:	83 b7       	in	r24, 0x33	; 51
 380:	8b 60       	ori	r24, 0x0B	; 11
 382:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<OCIE0);									//Enable compare interrupt
 384:	89 b7       	in	r24, 0x39	; 57
 386:	82 60       	ori	r24, 0x02	; 2
 388:	89 bf       	out	0x39, r24	; 57
	OCR0 = 250;
 38a:	8a ef       	ldi	r24, 0xFA	; 250
 38c:	8c bf       	out	0x3c, r24	; 60
	TCNT0 = 0;
 38e:	12 be       	out	0x32, r1	; 50
}
 390:	08 95       	ret

00000392 <Update_LCD>:

void Update_LCD(){
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
	sprintf(first_line,"Text:      %02d/16",16-cursor);
 396:	00 d0       	rcall	.+0      	; 0x398 <Update_LCD+0x6>
 398:	00 d0       	rcall	.+0      	; 0x39a <Update_LCD+0x8>
 39a:	00 d0       	rcall	.+0      	; 0x39c <Update_LCD+0xa>
 39c:	ed b7       	in	r30, 0x3d	; 61
 39e:	fe b7       	in	r31, 0x3e	; 62
 3a0:	31 96       	adiw	r30, 0x01	; 1
 3a2:	c7 ee       	ldi	r28, 0xE7	; 231
 3a4:	d0 e0       	ldi	r29, 0x00	; 0
 3a6:	ad b7       	in	r26, 0x3d	; 61
 3a8:	be b7       	in	r27, 0x3e	; 62
 3aa:	12 96       	adiw	r26, 0x02	; 2
 3ac:	dc 93       	st	X, r29
 3ae:	ce 93       	st	-X, r28
 3b0:	11 97       	sbiw	r26, 0x01	; 1
 3b2:	88 e6       	ldi	r24, 0x68	; 104
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	93 83       	std	Z+3, r25	; 0x03
 3b8:	82 83       	std	Z+2, r24	; 0x02
 3ba:	20 91 0a 01 	lds	r18, 0x010A
 3be:	80 e1       	ldi	r24, 0x10	; 16
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	82 1b       	sub	r24, r18
 3c4:	91 09       	sbc	r25, r1
 3c6:	95 83       	std	Z+5, r25	; 0x05
 3c8:	84 83       	std	Z+4, r24	; 0x04
 3ca:	0e 94 93 03 	call	0x726	; 0x726 <sprintf>
	LCD_Clear();
 3ce:	8d b7       	in	r24, 0x3d	; 61
 3d0:	9e b7       	in	r25, 0x3e	; 62
 3d2:	06 96       	adiw	r24, 0x06	; 6
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	9e bf       	out	0x3e, r25	; 62
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	8d bf       	out	0x3d, r24	; 61
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Byte>
	LCD_GotoXY(0,0);
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_GotoXY>
	LCD_WriteString(first_line);
 3ee:	ce 01       	movw	r24, r28
 3f0:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_WriteString>
	LCD_GotoXY(0,1);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_GotoXY>
	LCD_WriteString(text_line);
 3fc:	88 ef       	ldi	r24, 0xF8	; 248
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_WriteString>
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <Clear_Text>:

void Clear_Text(){
 40a:	e8 ef       	ldi	r30, 0xF8	; 248
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	cf 01       	movw	r24, r30
 410:	40 96       	adiw	r24, 0x10	; 16
	uint8_t p = 0;
	for(p = 0; p < 16; p++) text_line[p] = ' ';
 412:	20 e2       	ldi	r18, 0x20	; 32
 414:	21 93       	st	Z+, r18
 416:	e8 17       	cp	r30, r24
 418:	f9 07       	cpc	r31, r25
 41a:	e1 f7       	brne	.-8      	; 0x414 <Clear_Text+0xa>
	cursor = 0;
 41c:	10 92 0a 01 	sts	0x010A, r1
}
 420:	08 95       	ret

00000422 <Delete_Text>:

void Delete_Text(uint8_t __cursor){
	if(__cursor != 0){
 422:	88 23       	and	r24, r24
 424:	71 f0       	breq	.+28     	; 0x442 <Delete_Text+0x20>
		text_line[__cursor] = ' ';
 426:	28 ef       	ldi	r18, 0xF8	; 248
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	f9 01       	movw	r30, r18
 42c:	e8 0f       	add	r30, r24
 42e:	f1 1d       	adc	r31, r1
 430:	90 e2       	ldi	r25, 0x20	; 32
 432:	90 83       	st	Z, r25
		__cursor--;
 434:	81 50       	subi	r24, 0x01	; 1
		text_line[__cursor] = ' ';
 436:	28 0f       	add	r18, r24
 438:	31 1d       	adc	r19, r1
 43a:	f9 01       	movw	r30, r18
 43c:	90 83       	st	Z, r25
		cursor = __cursor;
 43e:	80 93 0a 01 	sts	0x010A, r24
 442:	08 95       	ret

00000444 <Shift_Trigger>:
	}
}

void Shift_Trigger(){
	SHIFT = 1 - SHIFT;
 444:	90 91 0b 01 	lds	r25, 0x010B
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	89 1b       	sub	r24, r25
 44c:	80 93 0b 01 	sts	0x010B, r24
	if(SHIFT == 1) PORTC |= (1<<PC0);
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	11 f4       	brne	.+4      	; 0x458 <Shift_Trigger+0x14>
 454:	a8 9a       	sbi	0x15, 0	; 21
 456:	08 95       	ret
	else PORTC &= ~(1<<PC0);
 458:	a8 98       	cbi	0x15, 0	; 21
 45a:	08 95       	ret

0000045c <Send_Text>:
}

void Send_Text(){
	LCD_Clear();
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Byte>
	LCD_WriteString("Sending...");
 464:	8b e7       	ldi	r24, 0x7B	; 123
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	99 e6       	ldi	r25, 0x69	; 105
 470:	a8 e1       	ldi	r26, 0x18	; 24
 472:	81 50       	subi	r24, 0x01	; 1
 474:	90 40       	sbci	r25, 0x00	; 0
 476:	a0 40       	sbci	r26, 0x00	; 0
 478:	e1 f7       	brne	.-8      	; 0x472 <Send_Text+0x16>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <Send_Text+0x20>
 47c:	00 00       	nop
	_delay_ms(500);
	Clear_Text();
 47e:	0e 94 05 02 	call	0x40a	; 0x40a <Clear_Text>
}
 482:	08 95       	ret

00000484 <Capitalize_Char>:

char Capitalize_Char(char __c){
	if((__c > 96) && (__c < 123)) __c = __c - 32;
 484:	98 2f       	mov	r25, r24
 486:	91 56       	subi	r25, 0x61	; 97
 488:	9a 31       	cpi	r25, 0x1A	; 26
 48a:	08 f4       	brcc	.+2      	; 0x48e <Capitalize_Char+0xa>
 48c:	80 52       	subi	r24, 0x20	; 32
	return __c;
}
 48e:	08 95       	ret

00000490 <main>:



int main(void){
 490:	af 92       	push	r10
 492:	bf 92       	push	r11
 494:	cf 92       	push	r12
 496:	df 92       	push	r13
 498:	ef 92       	push	r14
 49a:	ff 92       	push	r15
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
	LCD_Init(LS_NONE);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_Init>
	Timer0_CTC_Init();
 4a8:	0e 94 bf 01 	call	0x37e	; 0x37e <Timer0_CTC_Init>
	sei();
 4ac:	78 94       	sei
	
	Update_LCD();
 4ae:	0e 94 c9 01 	call	0x392	; 0x392 <Update_LCD>
	
	DDRC |= (1<<PC0);
 4b2:	a0 9a       	sbi	0x14, 0	; 20
	PORTC &= ~(1<<PC0);
 4b4:	a8 98       	cbi	0x15, 0	; 21
							capt = 0;
						}
					}
					if(l_valid_key == valid_key){
						count_no_key++;
						if(count_no_key == no_key[valid_key]) count_no_key = 0;
 4b6:	0f 2e       	mov	r0, r31
 4b8:	f6 ed       	ldi	r31, 0xD6	; 214
 4ba:	af 2e       	mov	r10, r31
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	bf 2e       	mov	r11, r31
 4c0:	f0 2d       	mov	r31, r0
							text_line[cursor-1] = key_pad[valid_key][count_no_key];
							if(SHIFT == 1) text_line[cursor-1] = Capitalize_Char(text_line[cursor-1]);
						} 
						else{
							if(cursor < 16){
								text_line[cursor] = key_pad[valid_key][0];
 4c2:	0f 2e       	mov	r0, r31
 4c4:	f6 e8       	ldi	r31, 0x86	; 134
 4c6:	cf 2e       	mov	r12, r31
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	df 2e       	mov	r13, r31
 4cc:	f0 2d       	mov	r31, r0
 4ce:	c8 ef       	ldi	r28, 0xF8	; 248
 4d0:	d0 e0       	ldi	r29, 0x00	; 0
	
	DDRC |= (1<<PC0);
	PORTC &= ~(1<<PC0);
	
    while(1){
		if(Scan_IO == 1){
 4d2:	80 91 0c 01 	lds	r24, 0x010C
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	09 f0       	breq	.+2      	; 0x4dc <main+0x4c>
 4da:	bf c0       	rjmp	.+382    	; 0x65a <main+0x1ca>
			capt++;
 4dc:	80 91 0d 01 	lds	r24, 0x010D
 4e0:	8f 5f       	subi	r24, 0xFF	; 255
 4e2:	80 93 0d 01 	sts	0x010D, r24
			PORTA = 0;
 4e6:	1b ba       	out	0x1b, r1	; 27
			temp = Check_key();
 4e8:	0e 94 49 00 	call	0x92	; 0x92 <Check_key>
 4ec:	80 93 11 01 	sts	0x0111, r24
			if((temp != l_temp) && (temp <16)){
 4f0:	90 91 12 01 	lds	r25, 0x0112
 4f4:	89 17       	cp	r24, r25
 4f6:	09 f4       	brne	.+2      	; 0x4fa <main+0x6a>
 4f8:	aa c0       	rjmp	.+340    	; 0x64e <main+0x1be>
 4fa:	80 31       	cpi	r24, 0x10	; 16
 4fc:	08 f0       	brcs	.+2      	; 0x500 <main+0x70>
 4fe:	a7 c0       	rjmp	.+334    	; 0x64e <main+0x1be>
				if(temp == 3) Delete_Text(cursor);
 500:	83 30       	cpi	r24, 0x03	; 3
 502:	29 f4       	brne	.+10     	; 0x50e <main+0x7e>
 504:	80 91 0a 01 	lds	r24, 0x010A
 508:	0e 94 11 02 	call	0x422	; 0x422 <Delete_Text>
 50c:	a0 c0       	rjmp	.+320    	; 0x64e <main+0x1be>
				else if(temp == 7) Clear_Text();
 50e:	87 30       	cpi	r24, 0x07	; 7
 510:	19 f4       	brne	.+6      	; 0x518 <main+0x88>
 512:	0e 94 05 02 	call	0x40a	; 0x40a <Clear_Text>
 516:	9b c0       	rjmp	.+310    	; 0x64e <main+0x1be>
				else if(temp == 11) Shift_Trigger();
 518:	8b 30       	cpi	r24, 0x0B	; 11
 51a:	19 f4       	brne	.+6      	; 0x522 <main+0x92>
 51c:	0e 94 22 02 	call	0x444	; 0x444 <Shift_Trigger>
 520:	96 c0       	rjmp	.+300    	; 0x64e <main+0x1be>
				else if(temp == 15)	Send_Text();
 522:	8f 30       	cpi	r24, 0x0F	; 15
 524:	19 f4       	brne	.+6      	; 0x52c <main+0x9c>
 526:	0e 94 2e 02 	call	0x45c	; 0x45c <Send_Text>
 52a:	91 c0       	rjmp	.+290    	; 0x64e <main+0x1be>
				else{
					valid_key = temp;
 52c:	80 93 13 01 	sts	0x0113, r24
					if(l_valid_key != valid_key){
 530:	90 91 e6 00 	lds	r25, 0x00E6
 534:	89 17       	cp	r24, r25
 536:	71 f1       	breq	.+92     	; 0x594 <main+0x104>
						count_no_key = 0;
 538:	10 92 14 01 	sts	0x0114, r1
						if(cursor < 16){
 53c:	10 91 0a 01 	lds	r17, 0x010A
 540:	10 31       	cpi	r17, 0x10	; 16
 542:	08 f5       	brcc	.+66     	; 0x586 <main+0xf6>
							text_line[cursor] = key_pad[valid_key][0];
 544:	e1 2e       	mov	r14, r17
 546:	ff 24       	eor	r15, r15
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	fc 01       	movw	r30, r24
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	8e 0f       	add	r24, r30
 556:	9f 1f       	adc	r25, r31
 558:	f6 01       	movw	r30, r12
 55a:	e8 0f       	add	r30, r24
 55c:	f9 1f       	adc	r31, r25
 55e:	80 81       	ld	r24, Z
 560:	fe 01       	movw	r30, r28
 562:	ee 0d       	add	r30, r14
 564:	ff 1d       	adc	r31, r15
 566:	80 83       	st	Z, r24
							if(SHIFT == 1) text_line[cursor] = Capitalize_Char(text_line[cursor]);
 568:	90 91 0b 01 	lds	r25, 0x010B
 56c:	91 30       	cpi	r25, 0x01	; 1
 56e:	31 f4       	brne	.+12     	; 0x57c <main+0xec>
 570:	0e 94 42 02 	call	0x484	; 0x484 <Capitalize_Char>
 574:	fe 01       	movw	r30, r28
 576:	ee 0d       	add	r30, r14
 578:	ff 1d       	adc	r31, r15
 57a:	80 83       	st	Z, r24
							cursor++;
 57c:	1f 5f       	subi	r17, 0xFF	; 255
 57e:	10 93 0a 01 	sts	0x010A, r17
							capt = 0;
 582:	10 92 0d 01 	sts	0x010D, r1
						}
					}
					if(l_valid_key == valid_key){
 586:	80 91 e6 00 	lds	r24, 0x00E6
 58a:	90 91 13 01 	lds	r25, 0x0113
 58e:	89 17       	cp	r24, r25
 590:	09 f0       	breq	.+2      	; 0x594 <main+0x104>
 592:	59 c0       	rjmp	.+178    	; 0x646 <main+0x1b6>
						count_no_key++;
 594:	20 91 14 01 	lds	r18, 0x0114
 598:	2f 5f       	subi	r18, 0xFF	; 255
 59a:	20 93 14 01 	sts	0x0114, r18
						if(count_no_key == no_key[valid_key]) count_no_key = 0;
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	f5 01       	movw	r30, r10
 5a2:	e8 0f       	add	r30, r24
 5a4:	f9 1f       	adc	r31, r25
 5a6:	30 81       	ld	r19, Z
 5a8:	23 17       	cp	r18, r19
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <main+0x120>
 5ac:	10 92 14 01 	sts	0x0114, r1
						if(capt < 11){
 5b0:	20 91 0d 01 	lds	r18, 0x010D
 5b4:	2b 30       	cpi	r18, 0x0B	; 11
 5b6:	18 f5       	brcc	.+70     	; 0x5fe <main+0x16e>
							text_line[cursor-1] = key_pad[valid_key][count_no_key];
 5b8:	e0 90 0a 01 	lds	r14, 0x010A
 5bc:	ff 24       	eor	r15, r15
 5be:	08 94       	sec
 5c0:	e1 08       	sbc	r14, r1
 5c2:	f1 08       	sbc	r15, r1
 5c4:	20 91 14 01 	lds	r18, 0x0114
 5c8:	fc 01       	movw	r30, r24
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	ee 0f       	add	r30, r30
 5d0:	ff 1f       	adc	r31, r31
 5d2:	e8 0f       	add	r30, r24
 5d4:	f9 1f       	adc	r31, r25
 5d6:	e2 0f       	add	r30, r18
 5d8:	f1 1d       	adc	r31, r1
 5da:	ec 0d       	add	r30, r12
 5dc:	fd 1d       	adc	r31, r13
 5de:	80 81       	ld	r24, Z
 5e0:	fe 01       	movw	r30, r28
 5e2:	ee 0d       	add	r30, r14
 5e4:	ff 1d       	adc	r31, r15
 5e6:	80 83       	st	Z, r24
							if(SHIFT == 1) text_line[cursor-1] = Capitalize_Char(text_line[cursor-1]);
 5e8:	90 91 0b 01 	lds	r25, 0x010B
 5ec:	91 30       	cpi	r25, 0x01	; 1
 5ee:	49 f5       	brne	.+82     	; 0x642 <main+0x1b2>
 5f0:	0e 94 42 02 	call	0x484	; 0x484 <Capitalize_Char>
 5f4:	fe 01       	movw	r30, r28
 5f6:	ee 0d       	add	r30, r14
 5f8:	ff 1d       	adc	r31, r15
 5fa:	80 83       	st	Z, r24
 5fc:	22 c0       	rjmp	.+68     	; 0x642 <main+0x1b2>
						} 
						else{
							if(cursor < 16){
 5fe:	10 91 0a 01 	lds	r17, 0x010A
 602:	10 31       	cpi	r17, 0x10	; 16
 604:	f0 f4       	brcc	.+60     	; 0x642 <main+0x1b2>
								text_line[cursor] = key_pad[valid_key][0];
 606:	e1 2e       	mov	r14, r17
 608:	ff 24       	eor	r15, r15
 60a:	9c 01       	movw	r18, r24
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	22 0f       	add	r18, r18
 612:	33 1f       	adc	r19, r19
 614:	82 0f       	add	r24, r18
 616:	93 1f       	adc	r25, r19
 618:	f6 01       	movw	r30, r12
 61a:	e8 0f       	add	r30, r24
 61c:	f9 1f       	adc	r31, r25
 61e:	80 81       	ld	r24, Z
 620:	fe 01       	movw	r30, r28
 622:	ee 0d       	add	r30, r14
 624:	ff 1d       	adc	r31, r15
 626:	80 83       	st	Z, r24
								if(SHIFT == 1) text_line[cursor] = Capitalize_Char(text_line[cursor]);
 628:	90 91 0b 01 	lds	r25, 0x010B
 62c:	91 30       	cpi	r25, 0x01	; 1
 62e:	31 f4       	brne	.+12     	; 0x63c <main+0x1ac>
 630:	0e 94 42 02 	call	0x484	; 0x484 <Capitalize_Char>
 634:	fe 01       	movw	r30, r28
 636:	ee 0d       	add	r30, r14
 638:	ff 1d       	adc	r31, r15
 63a:	80 83       	st	Z, r24
								cursor++;
 63c:	1f 5f       	subi	r17, 0xFF	; 255
 63e:	10 93 0a 01 	sts	0x010A, r17
							}
						}
						capt = 0;
 642:	10 92 0d 01 	sts	0x010D, r1
					}
					l_valid_key = valid_key;
 646:	80 91 13 01 	lds	r24, 0x0113
 64a:	80 93 e6 00 	sts	0x00E6, r24
				}
			}
			l_temp = temp;
 64e:	80 91 11 01 	lds	r24, 0x0111
 652:	80 93 12 01 	sts	0x0112, r24
			Update_LCD();
 656:	0e 94 c9 01 	call	0x392	; 0x392 <Update_LCD>
		}
		Scan_IO = 0;
 65a:	10 92 0c 01 	sts	0x010C, r1
			
    }
 65e:	39 cf       	rjmp	.-398    	; 0x4d2 <main+0x42>

00000660 <__vector_10>:
	
	return 0;
}


ISR(TIMER0_COMP_vect){
 660:	1f 92       	push	r1
 662:	0f 92       	push	r0
 664:	0f b6       	in	r0, 0x3f	; 63
 666:	0f 92       	push	r0
 668:	11 24       	eor	r1, r1
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
	ms++; 
 672:	80 91 0f 01 	lds	r24, 0x010F
 676:	8f 5f       	subi	r24, 0xFF	; 255
 678:	80 93 0f 01 	sts	0x010F, r24
	if(ms == 50){
 67c:	82 33       	cpi	r24, 0x32	; 50
 67e:	19 f5       	brne	.+70     	; 0x6c6 <__vector_10+0x66>
		ms = 0;
 680:	10 92 0f 01 	sts	0x010F, r1
		mms++;
 684:	80 91 10 01 	lds	r24, 0x0110
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	80 93 10 01 	sts	0x0110, r24
		if(mms == 20) mms = 0;
 68e:	84 31       	cpi	r24, 0x14	; 20
 690:	11 f4       	brne	.+4      	; 0x696 <__vector_10+0x36>
 692:	10 92 10 01 	sts	0x0110, r1
		if(cursor < 16){
 696:	80 91 0a 01 	lds	r24, 0x010A
 69a:	80 31       	cpi	r24, 0x10	; 16
 69c:	88 f4       	brcc	.+34     	; 0x6c0 <__vector_10+0x60>
			if(mms < 14) text_line[cursor] = '_';
 69e:	90 91 10 01 	lds	r25, 0x0110
 6a2:	9e 30       	cpi	r25, 0x0E	; 14
 6a4:	38 f4       	brcc	.+14     	; 0x6b4 <__vector_10+0x54>
 6a6:	e8 ef       	ldi	r30, 0xF8	; 248
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	e8 0f       	add	r30, r24
 6ac:	f1 1d       	adc	r31, r1
 6ae:	8f e5       	ldi	r24, 0x5F	; 95
 6b0:	80 83       	st	Z, r24
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <__vector_10+0x60>
			else text_line[cursor] = ' ';
 6b4:	e8 ef       	ldi	r30, 0xF8	; 248
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	e8 0f       	add	r30, r24
 6ba:	f1 1d       	adc	r31, r1
 6bc:	80 e2       	ldi	r24, 0x20	; 32
 6be:	80 83       	st	Z, r24
		}
		Scan_IO = 1;		
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	80 93 0c 01 	sts	0x010C, r24
	}
 6c6:	ff 91       	pop	r31
 6c8:	ef 91       	pop	r30
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	0f 90       	pop	r0
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	0f 90       	pop	r0
 6d4:	1f 90       	pop	r1
 6d6:	18 95       	reti

000006d8 <__divmodhi4>:
 6d8:	97 fb       	bst	r25, 7
 6da:	09 2e       	mov	r0, r25
 6dc:	07 26       	eor	r0, r23
 6de:	0a d0       	rcall	.+20     	; 0x6f4 <__divmodhi4_neg1>
 6e0:	77 fd       	sbrc	r23, 7
 6e2:	04 d0       	rcall	.+8      	; 0x6ec <__divmodhi4_neg2>
 6e4:	0c d0       	rcall	.+24     	; 0x6fe <__udivmodhi4>
 6e6:	06 d0       	rcall	.+12     	; 0x6f4 <__divmodhi4_neg1>
 6e8:	00 20       	and	r0, r0
 6ea:	1a f4       	brpl	.+6      	; 0x6f2 <__divmodhi4_exit>

000006ec <__divmodhi4_neg2>:
 6ec:	70 95       	com	r23
 6ee:	61 95       	neg	r22
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255

000006f2 <__divmodhi4_exit>:
 6f2:	08 95       	ret

000006f4 <__divmodhi4_neg1>:
 6f4:	f6 f7       	brtc	.-4      	; 0x6f2 <__divmodhi4_exit>
 6f6:	90 95       	com	r25
 6f8:	81 95       	neg	r24
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	08 95       	ret

000006fe <__udivmodhi4>:
 6fe:	aa 1b       	sub	r26, r26
 700:	bb 1b       	sub	r27, r27
 702:	51 e1       	ldi	r21, 0x11	; 17
 704:	07 c0       	rjmp	.+14     	; 0x714 <__udivmodhi4_ep>

00000706 <__udivmodhi4_loop>:
 706:	aa 1f       	adc	r26, r26
 708:	bb 1f       	adc	r27, r27
 70a:	a6 17       	cp	r26, r22
 70c:	b7 07       	cpc	r27, r23
 70e:	10 f0       	brcs	.+4      	; 0x714 <__udivmodhi4_ep>
 710:	a6 1b       	sub	r26, r22
 712:	b7 0b       	sbc	r27, r23

00000714 <__udivmodhi4_ep>:
 714:	88 1f       	adc	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	5a 95       	dec	r21
 71a:	a9 f7       	brne	.-22     	; 0x706 <__udivmodhi4_loop>
 71c:	80 95       	com	r24
 71e:	90 95       	com	r25
 720:	bc 01       	movw	r22, r24
 722:	cd 01       	movw	r24, r26
 724:	08 95       	ret

00000726 <sprintf>:
 726:	ae e0       	ldi	r26, 0x0E	; 14
 728:	b0 e0       	ldi	r27, 0x00	; 0
 72a:	e9 e9       	ldi	r30, 0x99	; 153
 72c:	f3 e0       	ldi	r31, 0x03	; 3
 72e:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__prologue_saves__+0x1c>
 732:	0d 89       	ldd	r16, Y+21	; 0x15
 734:	1e 89       	ldd	r17, Y+22	; 0x16
 736:	86 e0       	ldi	r24, 0x06	; 6
 738:	8c 83       	std	Y+4, r24	; 0x04
 73a:	1a 83       	std	Y+2, r17	; 0x02
 73c:	09 83       	std	Y+1, r16	; 0x01
 73e:	8f ef       	ldi	r24, 0xFF	; 255
 740:	9f e7       	ldi	r25, 0x7F	; 127
 742:	9e 83       	std	Y+6, r25	; 0x06
 744:	8d 83       	std	Y+5, r24	; 0x05
 746:	9e 01       	movw	r18, r28
 748:	27 5e       	subi	r18, 0xE7	; 231
 74a:	3f 4f       	sbci	r19, 0xFF	; 255
 74c:	ce 01       	movw	r24, r28
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	6f 89       	ldd	r22, Y+23	; 0x17
 752:	78 8d       	ldd	r23, Y+24	; 0x18
 754:	a9 01       	movw	r20, r18
 756:	0e 94 b6 03 	call	0x76c	; 0x76c <vfprintf>
 75a:	ef 81       	ldd	r30, Y+7	; 0x07
 75c:	f8 85       	ldd	r31, Y+8	; 0x08
 75e:	e0 0f       	add	r30, r16
 760:	f1 1f       	adc	r31, r17
 762:	10 82       	st	Z, r1
 764:	2e 96       	adiw	r28, 0x0e	; 14
 766:	e4 e0       	ldi	r30, 0x04	; 4
 768:	0c 94 67 06 	jmp	0xcce	; 0xcce <__epilogue_restores__+0x1c>

0000076c <vfprintf>:
 76c:	ac e0       	ldi	r26, 0x0C	; 12
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	ec eb       	ldi	r30, 0xBC	; 188
 772:	f3 e0       	ldi	r31, 0x03	; 3
 774:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__prologue_saves__>
 778:	6c 01       	movw	r12, r24
 77a:	1b 01       	movw	r2, r22
 77c:	8a 01       	movw	r16, r20
 77e:	fc 01       	movw	r30, r24
 780:	17 82       	std	Z+7, r1	; 0x07
 782:	16 82       	std	Z+6, r1	; 0x06
 784:	83 81       	ldd	r24, Z+3	; 0x03
 786:	81 ff       	sbrs	r24, 1
 788:	d1 c1       	rjmp	.+930    	; 0xb2c <__stack+0x2cd>
 78a:	2e 01       	movw	r4, r28
 78c:	08 94       	sec
 78e:	41 1c       	adc	r4, r1
 790:	51 1c       	adc	r5, r1
 792:	f6 01       	movw	r30, r12
 794:	93 81       	ldd	r25, Z+3	; 0x03
 796:	f1 01       	movw	r30, r2
 798:	93 fd       	sbrc	r25, 3
 79a:	85 91       	lpm	r24, Z+
 79c:	93 ff       	sbrs	r25, 3
 79e:	81 91       	ld	r24, Z+
 7a0:	1f 01       	movw	r2, r30
 7a2:	88 23       	and	r24, r24
 7a4:	09 f4       	brne	.+2      	; 0x7a8 <vfprintf+0x3c>
 7a6:	be c1       	rjmp	.+892    	; 0xb24 <__stack+0x2c5>
 7a8:	85 32       	cpi	r24, 0x25	; 37
 7aa:	39 f4       	brne	.+14     	; 0x7ba <vfprintf+0x4e>
 7ac:	93 fd       	sbrc	r25, 3
 7ae:	85 91       	lpm	r24, Z+
 7b0:	93 ff       	sbrs	r25, 3
 7b2:	81 91       	ld	r24, Z+
 7b4:	1f 01       	movw	r2, r30
 7b6:	85 32       	cpi	r24, 0x25	; 37
 7b8:	29 f4       	brne	.+10     	; 0x7c4 <vfprintf+0x58>
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	b6 01       	movw	r22, r12
 7be:	0e 94 b3 05 	call	0xb66	; 0xb66 <fputc>
 7c2:	e7 cf       	rjmp	.-50     	; 0x792 <vfprintf+0x26>
 7c4:	ee 24       	eor	r14, r14
 7c6:	ff 24       	eor	r15, r15
 7c8:	20 e0       	ldi	r18, 0x00	; 0
 7ca:	20 32       	cpi	r18, 0x20	; 32
 7cc:	b0 f4       	brcc	.+44     	; 0x7fa <vfprintf+0x8e>
 7ce:	8b 32       	cpi	r24, 0x2B	; 43
 7d0:	69 f0       	breq	.+26     	; 0x7ec <vfprintf+0x80>
 7d2:	8c 32       	cpi	r24, 0x2C	; 44
 7d4:	28 f4       	brcc	.+10     	; 0x7e0 <vfprintf+0x74>
 7d6:	80 32       	cpi	r24, 0x20	; 32
 7d8:	51 f0       	breq	.+20     	; 0x7ee <vfprintf+0x82>
 7da:	83 32       	cpi	r24, 0x23	; 35
 7dc:	71 f4       	brne	.+28     	; 0x7fa <vfprintf+0x8e>
 7de:	0b c0       	rjmp	.+22     	; 0x7f6 <vfprintf+0x8a>
 7e0:	8d 32       	cpi	r24, 0x2D	; 45
 7e2:	39 f0       	breq	.+14     	; 0x7f2 <vfprintf+0x86>
 7e4:	80 33       	cpi	r24, 0x30	; 48
 7e6:	49 f4       	brne	.+18     	; 0x7fa <vfprintf+0x8e>
 7e8:	21 60       	ori	r18, 0x01	; 1
 7ea:	2c c0       	rjmp	.+88     	; 0x844 <vfprintf+0xd8>
 7ec:	22 60       	ori	r18, 0x02	; 2
 7ee:	24 60       	ori	r18, 0x04	; 4
 7f0:	29 c0       	rjmp	.+82     	; 0x844 <vfprintf+0xd8>
 7f2:	28 60       	ori	r18, 0x08	; 8
 7f4:	27 c0       	rjmp	.+78     	; 0x844 <vfprintf+0xd8>
 7f6:	20 61       	ori	r18, 0x10	; 16
 7f8:	25 c0       	rjmp	.+74     	; 0x844 <vfprintf+0xd8>
 7fa:	27 fd       	sbrc	r18, 7
 7fc:	2c c0       	rjmp	.+88     	; 0x856 <vfprintf+0xea>
 7fe:	38 2f       	mov	r19, r24
 800:	30 53       	subi	r19, 0x30	; 48
 802:	3a 30       	cpi	r19, 0x0A	; 10
 804:	98 f4       	brcc	.+38     	; 0x82c <vfprintf+0xc0>
 806:	26 ff       	sbrs	r18, 6
 808:	08 c0       	rjmp	.+16     	; 0x81a <vfprintf+0xae>
 80a:	8e 2d       	mov	r24, r14
 80c:	88 0f       	add	r24, r24
 80e:	e8 2e       	mov	r14, r24
 810:	ee 0c       	add	r14, r14
 812:	ee 0c       	add	r14, r14
 814:	e8 0e       	add	r14, r24
 816:	e3 0e       	add	r14, r19
 818:	15 c0       	rjmp	.+42     	; 0x844 <vfprintf+0xd8>
 81a:	8f 2d       	mov	r24, r15
 81c:	88 0f       	add	r24, r24
 81e:	f8 2e       	mov	r15, r24
 820:	ff 0c       	add	r15, r15
 822:	ff 0c       	add	r15, r15
 824:	f8 0e       	add	r15, r24
 826:	f3 0e       	add	r15, r19
 828:	20 62       	ori	r18, 0x20	; 32
 82a:	0c c0       	rjmp	.+24     	; 0x844 <vfprintf+0xd8>
 82c:	8e 32       	cpi	r24, 0x2E	; 46
 82e:	21 f4       	brne	.+8      	; 0x838 <vfprintf+0xcc>
 830:	26 fd       	sbrc	r18, 6
 832:	78 c1       	rjmp	.+752    	; 0xb24 <__stack+0x2c5>
 834:	20 64       	ori	r18, 0x40	; 64
 836:	06 c0       	rjmp	.+12     	; 0x844 <vfprintf+0xd8>
 838:	8c 36       	cpi	r24, 0x6C	; 108
 83a:	11 f4       	brne	.+4      	; 0x840 <vfprintf+0xd4>
 83c:	20 68       	ori	r18, 0x80	; 128
 83e:	02 c0       	rjmp	.+4      	; 0x844 <vfprintf+0xd8>
 840:	88 36       	cpi	r24, 0x68	; 104
 842:	49 f4       	brne	.+18     	; 0x856 <vfprintf+0xea>
 844:	f1 01       	movw	r30, r2
 846:	93 fd       	sbrc	r25, 3
 848:	85 91       	lpm	r24, Z+
 84a:	93 ff       	sbrs	r25, 3
 84c:	81 91       	ld	r24, Z+
 84e:	1f 01       	movw	r2, r30
 850:	88 23       	and	r24, r24
 852:	09 f0       	breq	.+2      	; 0x856 <vfprintf+0xea>
 854:	ba cf       	rjmp	.-140    	; 0x7ca <vfprintf+0x5e>
 856:	98 2f       	mov	r25, r24
 858:	95 54       	subi	r25, 0x45	; 69
 85a:	93 30       	cpi	r25, 0x03	; 3
 85c:	18 f0       	brcs	.+6      	; 0x864 <__stack+0x5>
 85e:	90 52       	subi	r25, 0x20	; 32
 860:	93 30       	cpi	r25, 0x03	; 3
 862:	28 f4       	brcc	.+10     	; 0x86e <__stack+0xf>
 864:	0c 5f       	subi	r16, 0xFC	; 252
 866:	1f 4f       	sbci	r17, 0xFF	; 255
 868:	ff e3       	ldi	r31, 0x3F	; 63
 86a:	f9 83       	std	Y+1, r31	; 0x01
 86c:	0d c0       	rjmp	.+26     	; 0x888 <__stack+0x29>
 86e:	83 36       	cpi	r24, 0x63	; 99
 870:	31 f0       	breq	.+12     	; 0x87e <__stack+0x1f>
 872:	83 37       	cpi	r24, 0x73	; 115
 874:	71 f0       	breq	.+28     	; 0x892 <__stack+0x33>
 876:	83 35       	cpi	r24, 0x53	; 83
 878:	09 f0       	breq	.+2      	; 0x87c <__stack+0x1d>
 87a:	60 c0       	rjmp	.+192    	; 0x93c <__stack+0xdd>
 87c:	22 c0       	rjmp	.+68     	; 0x8c2 <__stack+0x63>
 87e:	f8 01       	movw	r30, r16
 880:	80 81       	ld	r24, Z
 882:	89 83       	std	Y+1, r24	; 0x01
 884:	0e 5f       	subi	r16, 0xFE	; 254
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	42 01       	movw	r8, r4
 88a:	71 e0       	ldi	r23, 0x01	; 1
 88c:	a7 2e       	mov	r10, r23
 88e:	b1 2c       	mov	r11, r1
 890:	16 c0       	rjmp	.+44     	; 0x8be <__stack+0x5f>
 892:	62 e0       	ldi	r22, 0x02	; 2
 894:	66 2e       	mov	r6, r22
 896:	71 2c       	mov	r7, r1
 898:	60 0e       	add	r6, r16
 89a:	71 1e       	adc	r7, r17
 89c:	f8 01       	movw	r30, r16
 89e:	80 80       	ld	r8, Z
 8a0:	91 80       	ldd	r9, Z+1	; 0x01
 8a2:	26 ff       	sbrs	r18, 6
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <__stack+0x4d>
 8a6:	6e 2d       	mov	r22, r14
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__stack+0x51>
 8ac:	6f ef       	ldi	r22, 0xFF	; 255
 8ae:	7f ef       	ldi	r23, 0xFF	; 255
 8b0:	c4 01       	movw	r24, r8
 8b2:	2c 87       	std	Y+12, r18	; 0x0c
 8b4:	0e 94 a8 05 	call	0xb50	; 0xb50 <strnlen>
 8b8:	5c 01       	movw	r10, r24
 8ba:	83 01       	movw	r16, r6
 8bc:	2c 85       	ldd	r18, Y+12	; 0x0c
 8be:	2f 77       	andi	r18, 0x7F	; 127
 8c0:	17 c0       	rjmp	.+46     	; 0x8f0 <__stack+0x91>
 8c2:	52 e0       	ldi	r21, 0x02	; 2
 8c4:	65 2e       	mov	r6, r21
 8c6:	71 2c       	mov	r7, r1
 8c8:	60 0e       	add	r6, r16
 8ca:	71 1e       	adc	r7, r17
 8cc:	f8 01       	movw	r30, r16
 8ce:	80 80       	ld	r8, Z
 8d0:	91 80       	ldd	r9, Z+1	; 0x01
 8d2:	26 ff       	sbrs	r18, 6
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <__stack+0x7d>
 8d6:	6e 2d       	mov	r22, r14
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
 8dc:	6f ef       	ldi	r22, 0xFF	; 255
 8de:	7f ef       	ldi	r23, 0xFF	; 255
 8e0:	c4 01       	movw	r24, r8
 8e2:	2c 87       	std	Y+12, r18	; 0x0c
 8e4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <strnlen_P>
 8e8:	5c 01       	movw	r10, r24
 8ea:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ec:	20 68       	ori	r18, 0x80	; 128
 8ee:	83 01       	movw	r16, r6
 8f0:	23 fd       	sbrc	r18, 3
 8f2:	20 c0       	rjmp	.+64     	; 0x934 <__stack+0xd5>
 8f4:	08 c0       	rjmp	.+16     	; 0x906 <__stack+0xa7>
 8f6:	80 e2       	ldi	r24, 0x20	; 32
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	b6 01       	movw	r22, r12
 8fc:	2c 87       	std	Y+12, r18	; 0x0c
 8fe:	0e 94 b3 05 	call	0xb66	; 0xb66 <fputc>
 902:	fa 94       	dec	r15
 904:	2c 85       	ldd	r18, Y+12	; 0x0c
 906:	8f 2d       	mov	r24, r15
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	a8 16       	cp	r10, r24
 90c:	b9 06       	cpc	r11, r25
 90e:	98 f3       	brcs	.-26     	; 0x8f6 <__stack+0x97>
 910:	11 c0       	rjmp	.+34     	; 0x934 <__stack+0xd5>
 912:	f4 01       	movw	r30, r8
 914:	27 fd       	sbrc	r18, 7
 916:	85 91       	lpm	r24, Z+
 918:	27 ff       	sbrs	r18, 7
 91a:	81 91       	ld	r24, Z+
 91c:	4f 01       	movw	r8, r30
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	b6 01       	movw	r22, r12
 922:	2c 87       	std	Y+12, r18	; 0x0c
 924:	0e 94 b3 05 	call	0xb66	; 0xb66 <fputc>
 928:	2c 85       	ldd	r18, Y+12	; 0x0c
 92a:	f1 10       	cpse	r15, r1
 92c:	fa 94       	dec	r15
 92e:	08 94       	sec
 930:	a1 08       	sbc	r10, r1
 932:	b1 08       	sbc	r11, r1
 934:	a1 14       	cp	r10, r1
 936:	b1 04       	cpc	r11, r1
 938:	61 f7       	brne	.-40     	; 0x912 <__stack+0xb3>
 93a:	f1 c0       	rjmp	.+482    	; 0xb1e <__stack+0x2bf>
 93c:	84 36       	cpi	r24, 0x64	; 100
 93e:	11 f0       	breq	.+4      	; 0x944 <__stack+0xe5>
 940:	89 36       	cpi	r24, 0x69	; 105
 942:	49 f5       	brne	.+82     	; 0x996 <__stack+0x137>
 944:	27 ff       	sbrs	r18, 7
 946:	08 c0       	rjmp	.+16     	; 0x958 <__stack+0xf9>
 948:	f8 01       	movw	r30, r16
 94a:	60 81       	ld	r22, Z
 94c:	71 81       	ldd	r23, Z+1	; 0x01
 94e:	82 81       	ldd	r24, Z+2	; 0x02
 950:	93 81       	ldd	r25, Z+3	; 0x03
 952:	0c 5f       	subi	r16, 0xFC	; 252
 954:	1f 4f       	sbci	r17, 0xFF	; 255
 956:	09 c0       	rjmp	.+18     	; 0x96a <__stack+0x10b>
 958:	f8 01       	movw	r30, r16
 95a:	60 81       	ld	r22, Z
 95c:	71 81       	ldd	r23, Z+1	; 0x01
 95e:	88 27       	eor	r24, r24
 960:	77 fd       	sbrc	r23, 7
 962:	80 95       	com	r24
 964:	98 2f       	mov	r25, r24
 966:	0e 5f       	subi	r16, 0xFE	; 254
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	4f e6       	ldi	r20, 0x6F	; 111
 96c:	b4 2e       	mov	r11, r20
 96e:	b2 22       	and	r11, r18
 970:	97 ff       	sbrs	r25, 7
 972:	09 c0       	rjmp	.+18     	; 0x986 <__stack+0x127>
 974:	90 95       	com	r25
 976:	80 95       	com	r24
 978:	70 95       	com	r23
 97a:	61 95       	neg	r22
 97c:	7f 4f       	sbci	r23, 0xFF	; 255
 97e:	8f 4f       	sbci	r24, 0xFF	; 255
 980:	9f 4f       	sbci	r25, 0xFF	; 255
 982:	f0 e8       	ldi	r31, 0x80	; 128
 984:	bf 2a       	or	r11, r31
 986:	a2 01       	movw	r20, r4
 988:	2a e0       	ldi	r18, 0x0A	; 10
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	0e 94 df 05 	call	0xbbe	; 0xbbe <__ultoa_invert>
 990:	78 2e       	mov	r7, r24
 992:	74 18       	sub	r7, r4
 994:	45 c0       	rjmp	.+138    	; 0xa20 <__stack+0x1c1>
 996:	85 37       	cpi	r24, 0x75	; 117
 998:	31 f4       	brne	.+12     	; 0x9a6 <__stack+0x147>
 99a:	3f ee       	ldi	r19, 0xEF	; 239
 99c:	b3 2e       	mov	r11, r19
 99e:	b2 22       	and	r11, r18
 9a0:	2a e0       	ldi	r18, 0x0A	; 10
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	25 c0       	rjmp	.+74     	; 0x9f0 <__stack+0x191>
 9a6:	99 ef       	ldi	r25, 0xF9	; 249
 9a8:	b9 2e       	mov	r11, r25
 9aa:	b2 22       	and	r11, r18
 9ac:	8f 36       	cpi	r24, 0x6F	; 111
 9ae:	c1 f0       	breq	.+48     	; 0x9e0 <__stack+0x181>
 9b0:	80 37       	cpi	r24, 0x70	; 112
 9b2:	20 f4       	brcc	.+8      	; 0x9bc <__stack+0x15d>
 9b4:	88 35       	cpi	r24, 0x58	; 88
 9b6:	09 f0       	breq	.+2      	; 0x9ba <__stack+0x15b>
 9b8:	b5 c0       	rjmp	.+362    	; 0xb24 <__stack+0x2c5>
 9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <__stack+0x177>
 9bc:	80 37       	cpi	r24, 0x70	; 112
 9be:	21 f0       	breq	.+8      	; 0x9c8 <__stack+0x169>
 9c0:	88 37       	cpi	r24, 0x78	; 120
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <__stack+0x167>
 9c4:	af c0       	rjmp	.+350    	; 0xb24 <__stack+0x2c5>
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__stack+0x16d>
 9c8:	20 e1       	ldi	r18, 0x10	; 16
 9ca:	b2 2a       	or	r11, r18
 9cc:	b4 fe       	sbrs	r11, 4
 9ce:	0b c0       	rjmp	.+22     	; 0x9e6 <__stack+0x187>
 9d0:	84 e0       	ldi	r24, 0x04	; 4
 9d2:	b8 2a       	or	r11, r24
 9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <__stack+0x187>
 9d6:	b4 fe       	sbrs	r11, 4
 9d8:	09 c0       	rjmp	.+18     	; 0x9ec <__stack+0x18d>
 9da:	e6 e0       	ldi	r30, 0x06	; 6
 9dc:	be 2a       	or	r11, r30
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <__stack+0x18d>
 9e0:	28 e0       	ldi	r18, 0x08	; 8
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__stack+0x191>
 9e6:	20 e1       	ldi	r18, 0x10	; 16
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <__stack+0x191>
 9ec:	20 e1       	ldi	r18, 0x10	; 16
 9ee:	32 e0       	ldi	r19, 0x02	; 2
 9f0:	b7 fe       	sbrs	r11, 7
 9f2:	08 c0       	rjmp	.+16     	; 0xa04 <__stack+0x1a5>
 9f4:	f8 01       	movw	r30, r16
 9f6:	60 81       	ld	r22, Z
 9f8:	71 81       	ldd	r23, Z+1	; 0x01
 9fa:	82 81       	ldd	r24, Z+2	; 0x02
 9fc:	93 81       	ldd	r25, Z+3	; 0x03
 9fe:	0c 5f       	subi	r16, 0xFC	; 252
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	07 c0       	rjmp	.+14     	; 0xa12 <__stack+0x1b3>
 a04:	f8 01       	movw	r30, r16
 a06:	60 81       	ld	r22, Z
 a08:	71 81       	ldd	r23, Z+1	; 0x01
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0e 5f       	subi	r16, 0xFE	; 254
 a10:	1f 4f       	sbci	r17, 0xFF	; 255
 a12:	a2 01       	movw	r20, r4
 a14:	0e 94 df 05 	call	0xbbe	; 0xbbe <__ultoa_invert>
 a18:	78 2e       	mov	r7, r24
 a1a:	74 18       	sub	r7, r4
 a1c:	ff e7       	ldi	r31, 0x7F	; 127
 a1e:	bf 22       	and	r11, r31
 a20:	b6 fe       	sbrs	r11, 6
 a22:	0b c0       	rjmp	.+22     	; 0xa3a <__stack+0x1db>
 a24:	2e ef       	ldi	r18, 0xFE	; 254
 a26:	b2 22       	and	r11, r18
 a28:	7e 14       	cp	r7, r14
 a2a:	38 f4       	brcc	.+14     	; 0xa3a <__stack+0x1db>
 a2c:	b4 fe       	sbrs	r11, 4
 a2e:	07 c0       	rjmp	.+14     	; 0xa3e <__stack+0x1df>
 a30:	b2 fc       	sbrc	r11, 2
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <__stack+0x1df>
 a34:	8f ee       	ldi	r24, 0xEF	; 239
 a36:	b8 22       	and	r11, r24
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <__stack+0x1df>
 a3a:	a7 2c       	mov	r10, r7
 a3c:	01 c0       	rjmp	.+2      	; 0xa40 <__stack+0x1e1>
 a3e:	ae 2c       	mov	r10, r14
 a40:	8b 2d       	mov	r24, r11
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	b4 fe       	sbrs	r11, 4
 a46:	0d c0       	rjmp	.+26     	; 0xa62 <__stack+0x203>
 a48:	fe 01       	movw	r30, r28
 a4a:	e7 0d       	add	r30, r7
 a4c:	f1 1d       	adc	r31, r1
 a4e:	20 81       	ld	r18, Z
 a50:	20 33       	cpi	r18, 0x30	; 48
 a52:	19 f4       	brne	.+6      	; 0xa5a <__stack+0x1fb>
 a54:	e9 ee       	ldi	r30, 0xE9	; 233
 a56:	be 22       	and	r11, r30
 a58:	09 c0       	rjmp	.+18     	; 0xa6c <__stack+0x20d>
 a5a:	a3 94       	inc	r10
 a5c:	b2 fe       	sbrs	r11, 2
 a5e:	06 c0       	rjmp	.+12     	; 0xa6c <__stack+0x20d>
 a60:	04 c0       	rjmp	.+8      	; 0xa6a <__stack+0x20b>
 a62:	86 78       	andi	r24, 0x86	; 134
 a64:	90 70       	andi	r25, 0x00	; 0
 a66:	00 97       	sbiw	r24, 0x00	; 0
 a68:	09 f0       	breq	.+2      	; 0xa6c <__stack+0x20d>
 a6a:	a3 94       	inc	r10
 a6c:	8b 2c       	mov	r8, r11
 a6e:	99 24       	eor	r9, r9
 a70:	b3 fc       	sbrc	r11, 3
 a72:	14 c0       	rjmp	.+40     	; 0xa9c <__stack+0x23d>
 a74:	b0 fe       	sbrs	r11, 0
 a76:	0f c0       	rjmp	.+30     	; 0xa96 <__stack+0x237>
 a78:	af 14       	cp	r10, r15
 a7a:	28 f4       	brcc	.+10     	; 0xa86 <__stack+0x227>
 a7c:	e7 2c       	mov	r14, r7
 a7e:	ef 0c       	add	r14, r15
 a80:	ea 18       	sub	r14, r10
 a82:	af 2c       	mov	r10, r15
 a84:	08 c0       	rjmp	.+16     	; 0xa96 <__stack+0x237>
 a86:	e7 2c       	mov	r14, r7
 a88:	06 c0       	rjmp	.+12     	; 0xa96 <__stack+0x237>
 a8a:	80 e2       	ldi	r24, 0x20	; 32
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	b6 01       	movw	r22, r12
 a90:	0e 94 b3 05 	call	0xb66	; 0xb66 <fputc>
 a94:	a3 94       	inc	r10
 a96:	af 14       	cp	r10, r15
 a98:	c0 f3       	brcs	.-16     	; 0xa8a <__stack+0x22b>
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__stack+0x245>
 a9c:	af 14       	cp	r10, r15
 a9e:	10 f4       	brcc	.+4      	; 0xaa4 <__stack+0x245>
 aa0:	fa 18       	sub	r15, r10
 aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <__stack+0x247>
 aa4:	ff 24       	eor	r15, r15
 aa6:	84 fe       	sbrs	r8, 4
 aa8:	0f c0       	rjmp	.+30     	; 0xac8 <__stack+0x269>
 aaa:	80 e3       	ldi	r24, 0x30	; 48
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	b6 01       	movw	r22, r12
 ab0:	0e 94 b3 05 	call	0xb66	; 0xb66 <fputc>
 ab4:	82 fe       	sbrs	r8, 2
 ab6:	1f c0       	rjmp	.+62     	; 0xaf6 <__stack+0x297>
 ab8:	81 fe       	sbrs	r8, 1
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <__stack+0x263>
 abc:	88 e5       	ldi	r24, 0x58	; 88
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	10 c0       	rjmp	.+32     	; 0xae2 <__stack+0x283>
 ac2:	88 e7       	ldi	r24, 0x78	; 120
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	0d c0       	rjmp	.+26     	; 0xae2 <__stack+0x283>
 ac8:	c4 01       	movw	r24, r8
 aca:	86 78       	andi	r24, 0x86	; 134
 acc:	90 70       	andi	r25, 0x00	; 0
 ace:	00 97       	sbiw	r24, 0x00	; 0
 ad0:	91 f0       	breq	.+36     	; 0xaf6 <__stack+0x297>
 ad2:	81 fc       	sbrc	r8, 1
 ad4:	02 c0       	rjmp	.+4      	; 0xada <__stack+0x27b>
 ad6:	80 e2       	ldi	r24, 0x20	; 32
 ad8:	01 c0       	rjmp	.+2      	; 0xadc <__stack+0x27d>
 ada:	8b e2       	ldi	r24, 0x2B	; 43
 adc:	b7 fc       	sbrc	r11, 7
 ade:	8d e2       	ldi	r24, 0x2D	; 45
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	b6 01       	movw	r22, r12
 ae4:	0e 94 b3 05 	call	0xb66	; 0xb66 <fputc>
 ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <__stack+0x297>
 aea:	80 e3       	ldi	r24, 0x30	; 48
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	b6 01       	movw	r22, r12
 af0:	0e 94 b3 05 	call	0xb66	; 0xb66 <fputc>
 af4:	ea 94       	dec	r14
 af6:	7e 14       	cp	r7, r14
 af8:	c0 f3       	brcs	.-16     	; 0xaea <__stack+0x28b>
 afa:	7a 94       	dec	r7
 afc:	f2 01       	movw	r30, r4
 afe:	e7 0d       	add	r30, r7
 b00:	f1 1d       	adc	r31, r1
 b02:	80 81       	ld	r24, Z
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	b6 01       	movw	r22, r12
 b08:	0e 94 b3 05 	call	0xb66	; 0xb66 <fputc>
 b0c:	77 20       	and	r7, r7
 b0e:	a9 f7       	brne	.-22     	; 0xafa <__stack+0x29b>
 b10:	06 c0       	rjmp	.+12     	; 0xb1e <__stack+0x2bf>
 b12:	80 e2       	ldi	r24, 0x20	; 32
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	b6 01       	movw	r22, r12
 b18:	0e 94 b3 05 	call	0xb66	; 0xb66 <fputc>
 b1c:	fa 94       	dec	r15
 b1e:	ff 20       	and	r15, r15
 b20:	c1 f7       	brne	.-16     	; 0xb12 <__stack+0x2b3>
 b22:	37 ce       	rjmp	.-914    	; 0x792 <vfprintf+0x26>
 b24:	f6 01       	movw	r30, r12
 b26:	26 81       	ldd	r18, Z+6	; 0x06
 b28:	37 81       	ldd	r19, Z+7	; 0x07
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__stack+0x2d1>
 b2c:	2f ef       	ldi	r18, 0xFF	; 255
 b2e:	3f ef       	ldi	r19, 0xFF	; 255
 b30:	c9 01       	movw	r24, r18
 b32:	2c 96       	adiw	r28, 0x0c	; 12
 b34:	e2 e1       	ldi	r30, 0x12	; 18
 b36:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__epilogue_restores__>

00000b3a <strnlen_P>:
 b3a:	fc 01       	movw	r30, r24
 b3c:	05 90       	lpm	r0, Z+
 b3e:	61 50       	subi	r22, 0x01	; 1
 b40:	70 40       	sbci	r23, 0x00	; 0
 b42:	01 10       	cpse	r0, r1
 b44:	d8 f7       	brcc	.-10     	; 0xb3c <strnlen_P+0x2>
 b46:	80 95       	com	r24
 b48:	90 95       	com	r25
 b4a:	8e 0f       	add	r24, r30
 b4c:	9f 1f       	adc	r25, r31
 b4e:	08 95       	ret

00000b50 <strnlen>:
 b50:	fc 01       	movw	r30, r24
 b52:	61 50       	subi	r22, 0x01	; 1
 b54:	70 40       	sbci	r23, 0x00	; 0
 b56:	01 90       	ld	r0, Z+
 b58:	01 10       	cpse	r0, r1
 b5a:	d8 f7       	brcc	.-10     	; 0xb52 <strnlen+0x2>
 b5c:	80 95       	com	r24
 b5e:	90 95       	com	r25
 b60:	8e 0f       	add	r24, r30
 b62:	9f 1f       	adc	r25, r31
 b64:	08 95       	ret

00000b66 <fputc>:
 b66:	0f 93       	push	r16
 b68:	1f 93       	push	r17
 b6a:	cf 93       	push	r28
 b6c:	df 93       	push	r29
 b6e:	8c 01       	movw	r16, r24
 b70:	eb 01       	movw	r28, r22
 b72:	8b 81       	ldd	r24, Y+3	; 0x03
 b74:	81 ff       	sbrs	r24, 1
 b76:	1b c0       	rjmp	.+54     	; 0xbae <fputc+0x48>
 b78:	82 ff       	sbrs	r24, 2
 b7a:	0d c0       	rjmp	.+26     	; 0xb96 <fputc+0x30>
 b7c:	2e 81       	ldd	r18, Y+6	; 0x06
 b7e:	3f 81       	ldd	r19, Y+7	; 0x07
 b80:	8c 81       	ldd	r24, Y+4	; 0x04
 b82:	9d 81       	ldd	r25, Y+5	; 0x05
 b84:	28 17       	cp	r18, r24
 b86:	39 07       	cpc	r19, r25
 b88:	64 f4       	brge	.+24     	; 0xba2 <fputc+0x3c>
 b8a:	e8 81       	ld	r30, Y
 b8c:	f9 81       	ldd	r31, Y+1	; 0x01
 b8e:	01 93       	st	Z+, r16
 b90:	f9 83       	std	Y+1, r31	; 0x01
 b92:	e8 83       	st	Y, r30
 b94:	06 c0       	rjmp	.+12     	; 0xba2 <fputc+0x3c>
 b96:	e8 85       	ldd	r30, Y+8	; 0x08
 b98:	f9 85       	ldd	r31, Y+9	; 0x09
 b9a:	80 2f       	mov	r24, r16
 b9c:	09 95       	icall
 b9e:	00 97       	sbiw	r24, 0x00	; 0
 ba0:	31 f4       	brne	.+12     	; 0xbae <fputc+0x48>
 ba2:	8e 81       	ldd	r24, Y+6	; 0x06
 ba4:	9f 81       	ldd	r25, Y+7	; 0x07
 ba6:	01 96       	adiw	r24, 0x01	; 1
 ba8:	9f 83       	std	Y+7, r25	; 0x07
 baa:	8e 83       	std	Y+6, r24	; 0x06
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <fputc+0x4c>
 bae:	0f ef       	ldi	r16, 0xFF	; 255
 bb0:	1f ef       	ldi	r17, 0xFF	; 255
 bb2:	c8 01       	movw	r24, r16
 bb4:	df 91       	pop	r29
 bb6:	cf 91       	pop	r28
 bb8:	1f 91       	pop	r17
 bba:	0f 91       	pop	r16
 bbc:	08 95       	ret

00000bbe <__ultoa_invert>:
 bbe:	fa 01       	movw	r30, r20
 bc0:	aa 27       	eor	r26, r26
 bc2:	28 30       	cpi	r18, 0x08	; 8
 bc4:	51 f1       	breq	.+84     	; 0xc1a <__ultoa_invert+0x5c>
 bc6:	20 31       	cpi	r18, 0x10	; 16
 bc8:	81 f1       	breq	.+96     	; 0xc2a <__ultoa_invert+0x6c>
 bca:	e8 94       	clt
 bcc:	6f 93       	push	r22
 bce:	6e 7f       	andi	r22, 0xFE	; 254
 bd0:	6e 5f       	subi	r22, 0xFE	; 254
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255
 bd4:	8f 4f       	sbci	r24, 0xFF	; 255
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	af 4f       	sbci	r26, 0xFF	; 255
 bda:	b1 e0       	ldi	r27, 0x01	; 1
 bdc:	3e d0       	rcall	.+124    	; 0xc5a <__ultoa_invert+0x9c>
 bde:	b4 e0       	ldi	r27, 0x04	; 4
 be0:	3c d0       	rcall	.+120    	; 0xc5a <__ultoa_invert+0x9c>
 be2:	67 0f       	add	r22, r23
 be4:	78 1f       	adc	r23, r24
 be6:	89 1f       	adc	r24, r25
 be8:	9a 1f       	adc	r25, r26
 bea:	a1 1d       	adc	r26, r1
 bec:	68 0f       	add	r22, r24
 bee:	79 1f       	adc	r23, r25
 bf0:	8a 1f       	adc	r24, r26
 bf2:	91 1d       	adc	r25, r1
 bf4:	a1 1d       	adc	r26, r1
 bf6:	6a 0f       	add	r22, r26
 bf8:	71 1d       	adc	r23, r1
 bfa:	81 1d       	adc	r24, r1
 bfc:	91 1d       	adc	r25, r1
 bfe:	a1 1d       	adc	r26, r1
 c00:	20 d0       	rcall	.+64     	; 0xc42 <__ultoa_invert+0x84>
 c02:	09 f4       	brne	.+2      	; 0xc06 <__ultoa_invert+0x48>
 c04:	68 94       	set
 c06:	3f 91       	pop	r19
 c08:	2a e0       	ldi	r18, 0x0A	; 10
 c0a:	26 9f       	mul	r18, r22
 c0c:	11 24       	eor	r1, r1
 c0e:	30 19       	sub	r19, r0
 c10:	30 5d       	subi	r19, 0xD0	; 208
 c12:	31 93       	st	Z+, r19
 c14:	de f6       	brtc	.-74     	; 0xbcc <__ultoa_invert+0xe>
 c16:	cf 01       	movw	r24, r30
 c18:	08 95       	ret
 c1a:	46 2f       	mov	r20, r22
 c1c:	47 70       	andi	r20, 0x07	; 7
 c1e:	40 5d       	subi	r20, 0xD0	; 208
 c20:	41 93       	st	Z+, r20
 c22:	b3 e0       	ldi	r27, 0x03	; 3
 c24:	0f d0       	rcall	.+30     	; 0xc44 <__ultoa_invert+0x86>
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__ultoa_invert+0x5c>
 c28:	f6 cf       	rjmp	.-20     	; 0xc16 <__ultoa_invert+0x58>
 c2a:	46 2f       	mov	r20, r22
 c2c:	4f 70       	andi	r20, 0x0F	; 15
 c2e:	40 5d       	subi	r20, 0xD0	; 208
 c30:	4a 33       	cpi	r20, 0x3A	; 58
 c32:	18 f0       	brcs	.+6      	; 0xc3a <__ultoa_invert+0x7c>
 c34:	49 5d       	subi	r20, 0xD9	; 217
 c36:	31 fd       	sbrc	r19, 1
 c38:	40 52       	subi	r20, 0x20	; 32
 c3a:	41 93       	st	Z+, r20
 c3c:	02 d0       	rcall	.+4      	; 0xc42 <__ultoa_invert+0x84>
 c3e:	a9 f7       	brne	.-22     	; 0xc2a <__ultoa_invert+0x6c>
 c40:	ea cf       	rjmp	.-44     	; 0xc16 <__ultoa_invert+0x58>
 c42:	b4 e0       	ldi	r27, 0x04	; 4
 c44:	a6 95       	lsr	r26
 c46:	97 95       	ror	r25
 c48:	87 95       	ror	r24
 c4a:	77 95       	ror	r23
 c4c:	67 95       	ror	r22
 c4e:	ba 95       	dec	r27
 c50:	c9 f7       	brne	.-14     	; 0xc44 <__ultoa_invert+0x86>
 c52:	00 97       	sbiw	r24, 0x00	; 0
 c54:	61 05       	cpc	r22, r1
 c56:	71 05       	cpc	r23, r1
 c58:	08 95       	ret
 c5a:	9b 01       	movw	r18, r22
 c5c:	ac 01       	movw	r20, r24
 c5e:	0a 2e       	mov	r0, r26
 c60:	06 94       	lsr	r0
 c62:	57 95       	ror	r21
 c64:	47 95       	ror	r20
 c66:	37 95       	ror	r19
 c68:	27 95       	ror	r18
 c6a:	ba 95       	dec	r27
 c6c:	c9 f7       	brne	.-14     	; 0xc60 <__ultoa_invert+0xa2>
 c6e:	62 0f       	add	r22, r18
 c70:	73 1f       	adc	r23, r19
 c72:	84 1f       	adc	r24, r20
 c74:	95 1f       	adc	r25, r21
 c76:	a0 1d       	adc	r26, r0
 c78:	08 95       	ret

00000c7a <__prologue_saves__>:
 c7a:	2f 92       	push	r2
 c7c:	3f 92       	push	r3
 c7e:	4f 92       	push	r4
 c80:	5f 92       	push	r5
 c82:	6f 92       	push	r6
 c84:	7f 92       	push	r7
 c86:	8f 92       	push	r8
 c88:	9f 92       	push	r9
 c8a:	af 92       	push	r10
 c8c:	bf 92       	push	r11
 c8e:	cf 92       	push	r12
 c90:	df 92       	push	r13
 c92:	ef 92       	push	r14
 c94:	ff 92       	push	r15
 c96:	0f 93       	push	r16
 c98:	1f 93       	push	r17
 c9a:	cf 93       	push	r28
 c9c:	df 93       	push	r29
 c9e:	cd b7       	in	r28, 0x3d	; 61
 ca0:	de b7       	in	r29, 0x3e	; 62
 ca2:	ca 1b       	sub	r28, r26
 ca4:	db 0b       	sbc	r29, r27
 ca6:	0f b6       	in	r0, 0x3f	; 63
 ca8:	f8 94       	cli
 caa:	de bf       	out	0x3e, r29	; 62
 cac:	0f be       	out	0x3f, r0	; 63
 cae:	cd bf       	out	0x3d, r28	; 61
 cb0:	09 94       	ijmp

00000cb2 <__epilogue_restores__>:
 cb2:	2a 88       	ldd	r2, Y+18	; 0x12
 cb4:	39 88       	ldd	r3, Y+17	; 0x11
 cb6:	48 88       	ldd	r4, Y+16	; 0x10
 cb8:	5f 84       	ldd	r5, Y+15	; 0x0f
 cba:	6e 84       	ldd	r6, Y+14	; 0x0e
 cbc:	7d 84       	ldd	r7, Y+13	; 0x0d
 cbe:	8c 84       	ldd	r8, Y+12	; 0x0c
 cc0:	9b 84       	ldd	r9, Y+11	; 0x0b
 cc2:	aa 84       	ldd	r10, Y+10	; 0x0a
 cc4:	b9 84       	ldd	r11, Y+9	; 0x09
 cc6:	c8 84       	ldd	r12, Y+8	; 0x08
 cc8:	df 80       	ldd	r13, Y+7	; 0x07
 cca:	ee 80       	ldd	r14, Y+6	; 0x06
 ccc:	fd 80       	ldd	r15, Y+5	; 0x05
 cce:	0c 81       	ldd	r16, Y+4	; 0x04
 cd0:	1b 81       	ldd	r17, Y+3	; 0x03
 cd2:	aa 81       	ldd	r26, Y+2	; 0x02
 cd4:	b9 81       	ldd	r27, Y+1	; 0x01
 cd6:	ce 0f       	add	r28, r30
 cd8:	d1 1d       	adc	r29, r1
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	f8 94       	cli
 cde:	de bf       	out	0x3e, r29	; 62
 ce0:	0f be       	out	0x3f, r0	; 63
 ce2:	cd bf       	out	0x3d, r28	; 61
 ce4:	ed 01       	movw	r28, r26
 ce6:	08 95       	ret

00000ce8 <_exit>:
 ce8:	f8 94       	cli

00000cea <__stop_program>:
 cea:	ff cf       	rjmp	.-2      	; 0xcea <__stop_program>
